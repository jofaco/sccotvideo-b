from django.contrib.auth import authenticate
from django.contrib.auth.hashers import make_password
from rest_framework import status
from rest_framework.generics import GenericAPIView
from rest_framework.response import Response
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework_simplejwt.views import TokenObtainPairView
from rest_framework.permissions import IsAuthenticated

from apps.users.api.serializers.User_serializers import CustomTokenOptainPairSerializer, CustomUserSerializer
from apps.users.models import User

# Importacion modulo para usar Odoo
import xmlrpc.client

# PROD
#url = "https://sccot.odoo.com"
#db = "sccot-master-6280105"
#usernameOdoo = "desarrollador.web@sccot.org.co" 
#key = "ff15f623ef77dbfccd570420830edd64f9334c5a"
# PRUEBAS
url = "https://sccot-tests-0305-12088670.dev.odoo.com"
db = "sccot-tests-0305-12088670"
usernameOdoo = "desarrollador.web@sccot.org.co" 
key = "2023"

class login(TokenObtainPairView):
    serializer_class = CustomTokenOptainPairSerializer

    def post(self, request, *args, **kwargs):
        """Metodo para realizar el login por parte del usuario
        Args.
            request (json): Datos enviados desde el login con las credenciales de ingreso(username y password)
        Returns.
            Response: Retorna los datos necesarios para realizar peticiones correctamente (access_token, refresh_token, user), mensaje y estado de la petición.
        """        
        username = request.data.get('username','')
        password = request.data.get('password','')

        user = authenticate(
            username = username,
            password = password
        )

        if user:
            print("Usuario ya existente. se procede a iniciar sesion")

            common = xmlrpc.client.ServerProxy('{}/xmlrpc/2/common'.format(url))
            uid = common.authenticate(db,usernameOdoo,key,{})
            models = xmlrpc.client.ServerProxy('{}/xmlrpc/2/object'.format(url))

            # Buscando usuario odoo que contenga numero de documento y email a buscar            
            email_search = str(username).strip()
            document_number = str(password).strip()
            print(email_search,document_number)
            search_domain = [('document_number', '=', document_number ), ('email', 'like',email_search )]
            contact_ids = models.execute_kw(db, uid, key, 'res.partner', 'search', [search_domain])
            
            if contact_ids:
                contact_details = models.execute_kw(db, uid, key, 'res.partner', 'read', [contact_ids[0]])
                # Validamos si el usuario esta Al día en odoo
                if contact_details[0]["x_studio_estado_del_miembro"] == "Al día":

                    login_serializer = self.serializer_class(data= request.data)
                    # Si el usuario esta al dia se realiza validacion de login
                    if login_serializer.is_valid():

                        user_serializer = CustomUserSerializer(user)
                        return Response({
                            'access_token': login_serializer.validated_data.get('access'),
                            'refresh_token': login_serializer.validated_data.get('refresh'),
                            'user': user_serializer.data,
                            'message':'Inicio de sesión exitoso!'
                        }, status=status.HTTP_200_OK) 
                    else:
                        print("algun dato quedo mal ")
                        return Response({'error':'Algun dato esta mal ingresado'}, status=status.HTTP_400_BAD_REQUEST)
                else:
                    print("No esta al dia por favor volver a iniciar sesion ")
                    return Response({'error':'No esta al dia por favor contactarse con inscripciones@sccot.org.co'}, status=status.HTTP_400_BAD_REQUEST)
            
                # -----------------------------------------
        else:
            # El usuario no existe en la base de datos de sccotview
            print("se ejecuto el else de aqui porque no existia el usuario en db")
            
            # Buscando usuario en odoo que contenga numero de identificacion y correo a buscar             
            email_search = str(username).strip()
            document_number = str(password).strip()

            common = xmlrpc.client.ServerProxy('{}/xmlrpc/2/common'.format(url))
            uid = common.authenticate(db,usernameOdoo,key,{})
            models = xmlrpc.client.ServerProxy('{}/xmlrpc/2/object'.format(url))

            search_domain = [('document_number', '=', document_number ), ('email', 'like',email_search )]
            contact_ids = models.execute_kw(db, uid, key, 'res.partner', 'search', [search_domain])

            # Si encontro una coincidencia traemos el usuario de odoo
            if contact_ids:
                contact_details = models.execute_kw(db, uid, key, 'res.partner', 'read', [contact_ids[0]])
                
                #permitiendo el acceso a miembros (Titular Senior, Titular, Registro Titular)
                # Si el usuario odoo cumple ciertas condiciones le creamos un usuario en sccotview
                if contact_details[0]["x_studio_estado_del_miembro"] == "Al día" and contact_details[0]["x_studio_categora_del_miembro"][1] == "Titular" or contact_details[0]["x_studio_categora_del_miembro"][1] == "Titular Senior" and contact_details[0]["x_studio_clase_de_cliente"][1] == "Miembro" or contact_details[0]["x_studio_clase_de_cliente"][1] == "Registro":
                    hashed_password = make_password(password)
                    
                    created = User.objects.get_or_create(username=contact_details[0]["email"],name=contact_details[0]["email"], defaults={'email': contact_details[0]["email"], 'password': hashed_password})
                    userMod = authenticate(
                        username = email_search,
                        password = password
                    )

                    #creacion de usuario en sccotview
                    if created:
                        
                        # Si el usuario ya esta creado, Iniciamos sesión con datos del nuevo usuario
                        login_serializer = self.serializer_class(data= request.data)
                        if login_serializer.is_valid():

                            user_serializer = CustomUserSerializer(userMod)
                            return Response({
                                'access_token': login_serializer.validated_data.get('access'),
                                'refresh_token': login_serializer.validated_data.get('refresh'),
                                'user': user_serializer.data,
                                'message':'Inicio de sesión exitoso!'
                            }, status=status.HTTP_200_OK) 
                        else:
                            return Response({'error':'Contraseña o nombre de usuario incorrectos'}, status=status.HTTP_400_BAD_REQUEST)
                    else:
                        # El usuario ya existe en sccotview
                        print("Usuario ya existente.")
                        login_serializer = self.serializer_class(data= request.data)
                        
                        if login_serializer.is_valid():

                            user_serializer = CustomUserSerializer(user)
                            return Response({
                                'access_token': login_serializer.validated_data.get('access'),
                                'refresh_token': login_serializer.validated_data.get('refresh'),
                                'user': user_serializer.data,
                                'message':'Inicio de sesión exitoso!'
                            }, status=status.HTTP_200_OK) 
                        else:

                            print("Contraseña o nombre de usuario incorrectos")
                            return Response({'error':'Contraseña o nombre de usuario incorrectos'}, status=status.HTTP_400_BAD_REQUEST)
                else:
                    # mensajes de error por si no esta al dia o si no es la clase de miembro o categoria de miembro que necesito A
                    print("Todavia no estas al dia por favor pagar anualidad del año", password, "not found.")
                    return Response({'error':'Todavia no estas al dia por favor pagar anualidad del año'}, status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({'error':'Lo sentimos no te encontramos, por favor contactarse al correo inscripciones@sccot.org.co'}, status=status.HTTP_400_BAD_REQUEST)
            # -----------------------------------------
           
            # Si el usuario se creó, created será True; de lo contrario, será False
            

class logout(GenericAPIView):
    permission_classes = [IsAuthenticated]
    serializer_class= CustomUserSerializer
    authentication_classes = ()

    def post(self, request):
        """Metodo para realizar el logout y "eliminar" el refresh_token

        Args.
            request (data): Data con el refresh_token

        Returns.
            Response: Respuesta con el estado de la petición.
        """        
        try:
            refresh_token = request.data["refresh_token"]
            token = RefreshToken(refresh_token)
            token.blacklist()
            return Response(status=status.HTTP_205_RESET_CONTENT)
        except Exception as e:
            return Response(status=status.HTTP_400_BAD_REQUEST)

    

