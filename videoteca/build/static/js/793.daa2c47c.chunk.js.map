{"version":3,"file":"static/js/793.daa2c47c.chunk.js","mappings":"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","sources":["axios.js","components/functions/capitalizarNombre.js","components/videos/videoLoading.js","services/historialUser.js","services/videoServer.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { Buffer } from \"buffer\";\r\n\r\nconst API_URL = \"https://sccotview.com/api/\";\r\n\r\n/**\r\n * Lista de endpoints que no requieren autenticación\r\n * Puedes ajustar esto según los endpoints de tu backend que son públicos.\r\n */\r\nconst PUBLIC_ENDPOINTS = [\r\n  \"free/\",\r\n  \"free\",         // Para GET general de videos\r\n           // Para GET general de series\r\n];\r\n\r\n/**\r\n * Instancia de Axios para hacer peticiones al backend\r\n */\r\nconst token = localStorage.getItem(\"access_token\");\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: API_URL,\r\n  timeout: 5000,\r\n  headers: {\r\n    \"Content-Type\": \"multipart/form-data\",  // Cambiado según tu observación\r\n    accept: \"application/json\",\r\n  },\r\n});\r\n\r\n\r\n/**\r\n * Interceptor de request para agregar el token solo si la ruta NO es pública\r\n */\r\naxiosInstance.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem(\"access_token\");\r\n\r\n  // Detectar si la URL es pública\r\n  const isPublic = PUBLIC_ENDPOINTS.some(endpoint => config.url.includes(endpoint));\r\n\r\n  if (token && !isPublic) {\r\n    config.headers[\"Authorization\"] = \"JWT \" + token;\r\n  } else {\r\n    delete config.headers[\"Authorization\"]; // Asegura que no se mande nada si no es necesario\r\n  }\r\n\r\n  return config;\r\n});\r\n\r\n/**\r\n * Interceptor de respuesta para manejar expiración del token\r\n */\r\naxiosInstance.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  async function (error) {\r\n    const originalRequest = error.config;\r\n\r\n    if (typeof error.response === \"undefined\") {\r\n      console.warn(\r\n        \"A server/network error occurred. \" +\r\n        \"Looks like CORS might be the problem.\"\r\n      );\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    if (\r\n      error.response.status === 401 &&\r\n      originalRequest.url === API_URL + \"api/token/refresh/\"\r\n    ) {\r\n      window.location.href = \"/userlogin1/\";\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    if (\r\n      error.response.data.code === \"token_not_valid\" &&\r\n      error.response.status === 401 &&\r\n      error.response.statusText === \"Unauthorized\"\r\n    ) {\r\n      const refreshToken = localStorage.getItem(\"refresh_token\");\r\n\r\n      if (refreshToken) {\r\n        const tokenParts = JSON.parse(\r\n          Buffer.from(refreshToken.split(\".\")[1], \"base64\").toString()\r\n        );\r\n\r\n        const now = Math.ceil(Date.now() / 1000);\r\n\r\n        if (tokenParts.exp > now) {\r\n          try {\r\n            const response = await axiosInstance.post(\"api/token/refresh/\", {\r\n              refresh: refreshToken,\r\n            });\r\n\r\n            localStorage.setItem(\"access_token\", response.data.access_token);\r\n            localStorage.setItem(\"refresh_token\", response.data.refresh_token);\r\n\r\n            axiosInstance.defaults.headers[\"Authorization\"] =\r\n              \"JWT \" + response.data.access_token;\r\n            originalRequest.headers[\"Authorization\"] =\r\n              \"JWT \" + response.data.access_token;\r\n\r\n            return axiosInstance(originalRequest);\r\n          } catch (err) {\r\n            console.log(err);\r\n          }\r\n        } else {\r\n          console.log(\"Refresh token is expired\", tokenParts.exp, now);\r\n          localStorage.clear();\r\n          window.location.href = \"/userlogin2/\";\r\n        }\r\n      } else {\r\n        console.log(\"Refresh token not available.\");\r\n        localStorage.clear();\r\n        window.location.href = \"/userlogin3/\";\r\n      }\r\n    }\r\n\r\n    if (error.response.status === 401) {\r\n      localStorage.clear();\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosInstance;","function capitalizarNombre(nombre) {\r\n    return nombre.toLowerCase().split(' ').map(palabra => \r\n        palabra.charAt(0).toUpperCase() + palabra.slice(1)\r\n    ).join(' ');\r\n}\r\nmodule.exports = capitalizarNombre;","import React from \"react\";\r\n\r\n/**\r\n * Verifica si los videos ya fueron cargados.\r\n * @param {component} Component \r\n * @returns\r\n */\r\nfunction VideoLoading(Component) {\r\n  /**\r\n    * @param {boolean} isLoading \r\n    * @param {Object} props\r\n    * @returns  Si ya cargaron los videos se retorna un componente recibido en la función main de lo contrario retorna mensaje indicando que aún se estan cargando.\r\n  */\r\n  return function VideoLoadingComponent({ isLoading, ...props }) {\r\n    if (!isLoading) return <Component {...props} />;\r\n    return (\r\n      <div  className=\"mt-4\" style={{ fontSize: \"25px\",display:\"flex\",justifyContent:\"center\",textAlign:\"center\",flexDirection:\"column\",alignItems:\"center\" }}>\r\n        <div className=\"spinner-grow text-light\" role=\"status\">\r\n          <span className=\"sr-only\"></span>\r\n        </div>\r\n          Espera por favor\r\n      </div>\r\n    );\r\n  };\r\n}\r\nexport default VideoLoading;\r\n","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"https://sccotview.com/api/historialUser/\";\r\n\r\n/**\r\n * Función para agregar un nuevo historial de usuario.\r\n * @param {formdata} newHistorial \r\n * @returns data enviada desde el backend\r\n */\r\nexport const RegisterHistorialUser = async (newHistorial) => {\r\n    const response = await axiosInstance.post(API_URL, newHistorial);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n/**\r\n * Función para entontrar todos los historiales de usuarios.\r\n * @returns data enviada desde el backend-\r\n */\r\nexport const ListHistorial = async () => {\r\n    const response = await axiosInstance.get(`${API_URL}`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n\r\nexport const ListHistorial4Comments = async () => {\r\n    const response = await axiosInstance.get(`${API_URL}list_4_comments/`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n  \r\n/**\r\n * Función para obtener un historial en específico.\r\n * @param {pk} histID \r\n * @returns data enviada desde el backend\r\n */\r\nexport const getHistorial = async (histID) => {\r\n  console.log(histID);\r\n    const response = await axiosInstance.get(`${API_URL}${histID}`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n/**\r\n * Función para listar el historial de un usuario en específico.\r\n * @param {fk} idUser \r\n * @returns data enviada desde el backend\r\n */\r\nexport const ListHistorialUser = async (idUser) => {\r\n    const response = await axiosInstance.post(`${API_URL}list_by_user/`,idUser);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n\r\n/**\r\n * Función para actualizar un historial de usuario.\r\n * @param {pk} id \r\n * @param {formdata} updateHU \r\n * @returns data enviada desde el backend\r\n */\r\nexport const updateHistorialUser = async(id,updateHU) =>{\r\n    const response = await axiosInstance.patch(API_URL+id+\"/\",updateHU);\r\n    if (response.status === 200) {\r\n        return response.data;\r\n    }\r\n}","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"https://sccotview.com/api/videos/\";\r\n\r\n/**\r\n * Función para consultar con el backend la lista de todos los videos sin filtrar.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const ListVideos = async () => {\r\n  const response = await axiosInstance.get(`${API_URL}`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\nexport const ListWebinars = async () => {\r\n  const response = await axiosInstance.get(`${API_URL}public/webinars/`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\nexport const ListVideosPublic = async () => {\r\n  const response = await axiosInstance.get(`${API_URL}public/`);\r\n  if (response.status === 200) {\r\n    console.log(response.data);\r\n    \r\n    return response.data;\r\n  }\r\n};\r\n/**\r\n * Función para consultar con el backend la lista de videos con el tipo Peliculas.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const ListPeliculas = async () => {\r\n  const response = await axiosInstance.get(`${API_URL}listPeliculas/`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n}\r\n/**\r\n * Función para consultar con el backend la lista de videos con el tipo Peliculas.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const ListVideosPorTemporada = async (temporadaId) => {\r\n  const response = await axiosInstance.get(`${API_URL}videostemporada/${temporadaId}`);\r\n  console.log(response.data);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n}\r\n/**\r\n * Función para consultar con el backend la lista de videos con el tipo Series.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const ListSeries = async () => {\r\n  const response = await axiosInstance.get(`${API_URL}listSeries/`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n}\r\n/**\r\n * Función para consultar con el backend la lista de videos con el tipo Casos.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const ListCasos = async () => {\r\n  const response = await axiosInstance.get(`${API_URL}listCasos/`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n}\r\n/**\r\n * Función para consultar con el backend un video con el id específico.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const getVideo = async (videoID) => {\r\n  const response = await axiosInstance.get(`${API_URL}${videoID}`);\r\n  console.log(response.data);\r\n  \r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n/**\r\n * Función para consultar con el backend un video con el id específico. Esta función se usa para tener los datos del video en el formulario de update.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const getVideoDT = async (videoID) => {\r\n  const response = await axiosInstance.get(API_URL + \"retrieve/\" + videoID);\r\n  if (response.status === 200) {\r\n    return response.data;\r\n  }\r\n};\r\n/**\r\n * Función Post para enviar los datos del formulario de registro de un nuevo video.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const RegisterVideo = async (newVideo) => {\r\n  const response = await axiosInstance.post(API_URL, newVideo);\r\n  console.log(response);\r\n  \r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n  else if(response.status === 409) {\r\n    return await response.data;\r\n  }\r\n};\r\n/**\r\n * Función para actualizar un video.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const UpdateVideo = async (videoID, updateVideo) => {\r\n  const response = await axiosInstance.put(\r\n    API_URL + videoID + \"/\",\r\n    updateVideo\r\n  );\r\n  console.log(response);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const partialUpdateVideo = async(id,PupdateVideo) =>{\r\n  const response = await axiosInstance.patch(API_URL+id+\"/\",PupdateVideo);\r\n  if (response.status === 200) {\r\n      return response.data;\r\n  }\r\n}\r\n/**\r\n * Función para eliminar un video.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const DeleteVideo = async (videoID) => {\r\n  return await axiosInstance.delete(`${API_URL}${videoID}`);\r\n\r\n};\r\n"],"names":["API_URL","PUBLIC_ENDPOINTS","axiosInstance","localStorage","getItem","axios","baseURL","timeout","headers","accept","interceptors","request","use","config","token","isPublic","some","endpoint","url","includes","response","error","originalRequest","console","warn","Promise","reject","status","window","location","href","data","code","statusText","refreshToken","tokenParts","JSON","parse","Buffer","split","toString","now","Math","ceil","Date","exp","post","refresh","setItem","access_token","refresh_token","defaults","log","clear","module","exports","nombre","toLowerCase","map","palabra","charAt","toUpperCase","slice","join","Component","isLoading","props","className","style","fontSize","display","justifyContent","textAlign","flexDirection","alignItems","role","RegisterHistorialUser","newHistorial","ListHistorial","getHistorial","histID","ListHistorialUser","idUser","updateHistorialUser","id","updateHU","ListVideos","ListWebinars","ListVideosPublic","ListPeliculas","ListCasos","getVideo","videoID","getVideoDT","RegisterVideo","newVideo","UpdateVideo","updateVideo","partialUpdateVideo","PupdateVideo","DeleteVideo"],"sourceRoot":""}