{"version":3,"file":"static/js/735.296f3c51.chunk.js","mappings":"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","sources":["axios.js","hooks/useModal.js","services/commentary.js","services/historialUser.js","services/serie.js","services/temporada.js","services/videoServer.js"],"sourcesContent":["import axios from \"axios\";\r\n//import jwt from \"jwt-decode\"\r\nimport {Buffer} from 'buffer';\r\n\r\nconst API_URL = \"http://sccotview.com/api/\";\r\n\r\n/**\r\n * Función para realizar las peticiones al backend enviando headers con el token \r\n */\r\nconst axiosInstance = axios.create({\r\n  baseURL: API_URL,\r\n  timeout: 5000,\r\n  headers: {  \r\n    Authorization: localStorage.getItem(\"access_token\")\r\n      ? \"JWT \" + localStorage.getItem(\"access_token\")\r\n      : null,\r\n    \"Content-Type\": \"multipart/form-data\",//tocó cambiarlo antes estaba \"Content-Type\": \"application/json\"\r\n    accept: \"application/json\",\r\n  },\r\n});\r\n\r\n/**\r\n * Función que valida si existe y es valido un access_token para manejo de sesión\r\n */\r\naxiosInstance.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  async function (error) {\r\n    const originalRequest = error.config;\r\n\r\n    if (typeof error.response === \"undefined\") {\r\n      console.warn(\r\n        \"A server/network error occurred. \" +\r\n          \"Looks like CORS might be the problem. \" +\r\n          \"Sorry about this - we will get it fixed shortly.\"\r\n      );\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    if (\r\n      error.response.status === 401 &&\r\n      originalRequest.url === API_URL + \"api/token/refresh/\"\r\n    ) {\r\n      window.location.href = \"/loginuser/\";\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    if (\r\n      error.response.data.code === \"token_not_valid\" &&\r\n      error.response.status === 401 &&\r\n      error.response.statusText === \"Unauthorized\"\r\n    ) {\r\n      const refreshToken = localStorage.getItem(\"refresh_token\");\r\n      if (refreshToken) {\r\n        //const tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\r\n        const tokenParts = JSON.parse(\r\n          Buffer.from(refreshToken.split(\".\")[1], \"base64\").toString()\r\n        );\r\n        /* const tokenParts = jwt(refreshToken, {\r\n\t\t\t\t\tcompleted: true\r\n\t\t\t\t  }) */\r\n        // exp date in token is expressed in seconds, while now() returns milliseconds:\r\n        const now = Math.ceil(Date.now() / 1000);\r\n        console.log(tokenParts.exp);\r\n\r\n        if (tokenParts.exp > now) {\r\n          return axiosInstance\r\n            .post(\"api/token/refresh/\", {\r\n              refresh: refreshToken,\r\n            })\r\n            .then((response) => {\r\n              localStorage.setItem(\"access_token\", response.data.access_token);\r\n              localStorage.setItem(\r\n                \"refresh_token\",\r\n                response.data.refresh_token\r\n              );\r\n\r\n              axiosInstance.defaults.headers[\"Authorization\"] =\r\n                \"JWT \" + response.data.access_token;\r\n              originalRequest.headers[\"Authorization\"] =\r\n                \"JWT \" + response.data.access_token;\r\n\r\n              return axiosInstance(originalRequest);\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n            });\r\n        } else {\r\n          console.log(\"Refresh token is expired\", tokenParts.exp, now);\r\n          window.localStorage.removeItem(\"access_token\")\r\n          window.localStorage.removeItem(\"refresh_token\")\r\n          window.localStorage.removeItem(\"user\")\r\n          window.location.href = \"/loginuser/\";\r\n          //alert(\"Prueba\");\r\n        }\r\n      } else {\r\n        console.log(\"Refresh token not available.\");\r\n          window.location.href = \"/loginuser/\";\r\n          //alert(\"Prueba2\");\r\n      }\r\n    }\r\n    if (error.response.status === 401)\r\n    {\r\n      window.location.href = \"/loginuser/\";\r\n    }\r\n    // specific error handling done elsewhere\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosInstance;","import { useState } from 'react';\r\n\r\n\r\nexport const useModal = (initialValue = false) => {\r\n  const [show, setShow] = useState(initialValue);\r\n\r\n  const handleShow = () => setShow(true); //función para mostrar el modal de comentario.\r\n  const handleClose = () => setShow(false); //función para cerrar el modal de comentario.\r\n\r\n  return [show, handleShow, handleClose];\r\n}\r\n\r\n\r\n","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"http://sccotview.com/api/commentaries/\";\r\n\r\n/**\r\n * Función para agregar un nuevo comentario a un video.\r\n * @param {formdata} newCommentary \r\n * @returns data enviada desde el backend\r\n */\r\nexport const RegisterCommentary = async (newCommentary) => {\r\n    const response = await axiosInstance.post(API_URL, newCommentary);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n/**\r\n * Función para entontrar todos los comentarios realizados.\r\n * @returns data enviada desde el backend-\r\n */\r\nexport const ListCommentaries = async () => {\r\n    const response = await axiosInstance.get(`${API_URL}`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n\r\nexport const ListCommentaryVideo = async (idVideo) => {\r\n    const response = await axiosInstance.post(`${API_URL}list_by_video/`,idVideo);\r\n    //console.log(response);\r\n    \r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n    else { \r\n        console.log(\"error\");\r\n        return await response.data;\r\n    }\r\n  };\r\n/**\r\n * Función para obtener un comentario en específico.\r\n * @param {pk} commentaryID \r\n * @returns data enviada desde el backend\r\n */\r\nexport const getCommentary = async (commentaryID) => {\r\n    const response = await axiosInstance.get(`${API_URL}${commentaryID}`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n\r\n/**\r\n * Función para actualizar un comentario .\r\n * @param {pk} id \r\n * @param {formdata} updCommentary \r\n * @returns data enviada desde el backend\r\n */\r\nexport const updateCommentary = async(id,updCommentary) =>{\r\n    const response = await axiosInstance.patch(API_URL+id+\"/\",updCommentary);\r\n    if (response.status === 200) {\r\n        return response.data;\r\n    }\r\n}","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"http://sccotview.com/api/historialUser/\";\r\n\r\n/**\r\n * Función para agregar un nuevo historial de usuario.\r\n * @param {formdata} newHistorial \r\n * @returns data enviada desde el backend\r\n */\r\nexport const RegisterHistorialUser = async (newHistorial) => {\r\n    const response = await axiosInstance.post(API_URL, newHistorial);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n/**\r\n * Función para entontrar todos los historiales de usuarios.\r\n * @returns data enviada desde el backend-\r\n */\r\nexport const ListHistorial = async () => {\r\n    const response = await axiosInstance.get(`${API_URL}`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n\r\nexport const ListHistorial4Comments = async () => {\r\n    const response = await axiosInstance.get(`${API_URL}list_4_comments/`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n  \r\n/**\r\n * Función para obtener un historial en específico.\r\n * @param {pk} histID \r\n * @returns data enviada desde el backend\r\n */\r\nexport const getHistorial = async (histID) => {\r\n  console.log(histID);\r\n    const response = await axiosInstance.get(`${API_URL}${histID}`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n/**\r\n * Función para listar el historial de un usuario en específico.\r\n * @param {fk} idUser \r\n * @returns data enviada desde el backend\r\n */\r\nexport const ListHistorialUser = async (idUser) => {\r\n    const response = await axiosInstance.post(`${API_URL}list_by_user/`,idUser);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n\r\n/**\r\n * Función para actualizar un historial de usuario.\r\n * @param {pk} id \r\n * @param {formdata} updateHU \r\n * @returns data enviada desde el backend\r\n */\r\nexport const updateHistorialUser = async(id,updateHU) =>{\r\n    const response = await axiosInstance.patch(API_URL+id+\"/\",updateHU);\r\n    if (response.status === 200) {\r\n        return response.data;\r\n    }\r\n}","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"http://sccotview.com/api/series/\";\r\n\r\n/**\r\n * Función para consultar todas las series registradas en la base de datos.\r\n * @returns Data enviada desde el backend\r\n */\r\nexport const ListSeries = async () => {\r\n  const response = await axiosInstance.get(API_URL);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const RegisterSerie = async (newSerie) => {\r\n  const response = await axiosInstance.post(API_URL, newSerie);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const getSerie = async (serieID) => {\r\n  const response = await axiosInstance.get(`${API_URL}${serieID}`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\n\r\nexport const updateSerie = async(id,updSerie) =>{\r\n  const response = await axiosInstance.patch(API_URL+id+\"/\",updSerie);\r\n  if (response.status === 200) {\r\n      return response.data;\r\n  }\r\n}","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"http://sccotview.com/api/temporadas/\";\r\n\r\n/**\r\n * Función para consultar todas las temporadas registradas en la base de datos.\r\n * @returns Data enviada desde el backend\r\n */\r\nexport const ListTemporadas = async () => {\r\n  const response = await axiosInstance.get(API_URL);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const RegisterTemporada = async (newTemporada) => {\r\n  const response = await axiosInstance.post(API_URL, newTemporada);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const getTemporada = async (temporadaID) => {\r\n  const response = await axiosInstance.get(`${API_URL}${temporadaID}`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const updateTemporada = async(id,updTemporada) =>{\r\n  const response = await axiosInstance.patch(API_URL+id+\"/\",updTemporada);\r\n  if (response.status === 200) {\r\n      return response.data;\r\n  }\r\n}","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"http://sccotview.com/api/videos/\";\r\n\r\n/**\r\n * Función para consultar con el backend la lista de todos los videos sin filtrar.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const ListVideos = async () => {\r\n  const response = await axiosInstance.get(`${API_URL}`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n/**\r\n * Función para consultar con el backend la lista de videos con el tipo Peliculas.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const ListPeliculas = async () => {\r\n  const response = await axiosInstance.get(`${API_URL}listPeliculas/`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n}\r\n/**\r\n * Función para consultar con el backend la lista de videos con el tipo Peliculas.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const ListVideosPorTemporada = async (temporadaId) => {\r\n  const response = await axiosInstance.get(`${API_URL}videostemporada/${temporadaId}`);\r\n  console.log(response.data);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n}\r\n/**\r\n * Función para consultar con el backend la lista de videos con el tipo Series.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const ListSeries = async () => {\r\n  const response = await axiosInstance.get(`${API_URL}listSeries/`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n}\r\n/**\r\n * Función para consultar con el backend la lista de videos con el tipo Casos.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const ListCasos = async () => {\r\n  const response = await axiosInstance.get(`${API_URL}listCasos/`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n}\r\n/**\r\n * Función para consultar con el backend un video con el id específico.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const getVideo = async (videoID) => {\r\n  const response = await axiosInstance.get(`${API_URL}${videoID}`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n/**\r\n * Función para consultar con el backend un video con el id específico. Esta función se usa para tener los datos del video en el formulario de update.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const getVideoDT = async (videoID) => {\r\n  const response = await axiosInstance.get(API_URL + \"retrieve/\" + videoID);\r\n  if (response.status === 200) {\r\n    return response.data;\r\n  }\r\n};\r\n/**\r\n * Función Post para enviar los datos del formulario de registro de un nuevo video.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const RegisterVideo = async (newVideo) => {\r\n  const response = await axiosInstance.post(API_URL, newVideo);\r\n  console.log(response);\r\n  \r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n  else if(response.status === 409) {\r\n    return await response.data;\r\n  }\r\n};\r\n/**\r\n * Función para actualizar un video.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const UpdateVideo = async (videoID, updateVideo) => {\r\n  const response = await axiosInstance.put(\r\n    API_URL + videoID + \"/\",\r\n    updateVideo\r\n  );\r\n  console.log(response);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const partialUpdateVideo = async(id,PupdateVideo) =>{\r\n  const response = await axiosInstance.patch(API_URL+id+\"/\",PupdateVideo);\r\n  if (response.status === 200) {\r\n      return response.data;\r\n  }\r\n}\r\n/**\r\n * Función para eliminar un video.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const DeleteVideo = async (videoID) => {\r\n  return await axiosInstance.delete(`${API_URL}${videoID}`);\r\n\r\n};\r\n"],"names":["API_URL","axiosInstance","axios","baseURL","timeout","headers","Authorization","localStorage","getItem","accept","interceptors","response","use","error","originalRequest","config","console","warn","Promise","reject","status","url","window","location","href","data","code","statusText","refreshToken","tokenParts","JSON","parse","Buffer","split","toString","now","Math","ceil","Date","log","exp","post","refresh","then","setItem","access_token","refresh_token","defaults","catch","err","removeItem","useModal","initialValue","useState","show","setShow","handleShow","handleClose","RegisterCommentary","newCommentary","ListCommentaryVideo","idVideo","getCommentary","commentaryID","updateCommentary","id","updCommentary","RegisterHistorialUser","newHistorial","ListHistorial","getHistorial","histID","ListHistorialUser","idUser","updateHistorialUser","updateHU","ListSeries","RegisterSerie","newSerie","getSerie","serieID","updateSerie","updSerie","ListTemporadas","RegisterTemporada","newTemporada","getTemporada","temporadaID","updateTemporada","updTemporada","ListVideos","ListPeliculas","ListCasos","getVideo","videoID","getVideoDT","RegisterVideo","newVideo","UpdateVideo","updateVideo","partialUpdateVideo","PupdateVideo","DeleteVideo"],"sourceRoot":""}