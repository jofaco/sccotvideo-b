{"version":3,"file":"static/js/607.b1387798.chunk.js","mappings":"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","sources":["components/videos/series.js","paginas/Series.js","services/serie.js","services/temporada.js"],"sourcesContent":["/* eslint-disable array-callback-return */\r\nimport { useEffect, useState } from \"react\";\r\n//Components\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\r\nimport \"../../index.css\";\r\n//dependencies\r\nimport { ErrorBoundary } from \"./errorsBoundary\";\r\nimport { ListCategorias } from \"../../services/category\";\r\n\r\nimport SearchComponent from \"./search\";\r\nimport VideosListUser2 from \"./videoListUser2\";\r\n\r\n/**\r\n * Función para mostrar los videos con tipo Serie en la pestaña Series\r\n * @param {object} series\r\n * @returns Componente del buscador y componente lista (Dependendiendo si el usuario es admin o no, se retorna un componente distinto)\r\n */\r\nconst SeriesList = ({series, ...props}) => {\r\n  const contenedorCarousel = document.getElementById(\"carousel\");\r\n\r\n  const [query, setQuery] = useState(\"\");\r\n  const [categories, setCategories] = useState(\"\");\r\n  const [searchParam] = useState([\"title_espanol\"]);\r\n  const [searchParam2] = useState([\"categoria\"]);\r\n\r\n  const [filterParam, setFilterParam] = useState([\"All\"]);\r\n\r\n  const data = localStorage.getItem(\"user\");\r\n  const user = JSON.parse(data);\r\n\r\n  /**\r\n   * Función para traer la lista de categorias \r\n   */\r\n  const listCategorias = async () => {\r\n    try {\r\n      const res = await ListCategorias();\r\n      setCategories(res);\r\n    } catch (error) {\r\n      console.log(\"Error\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    listCategorias();\r\n  }, []);\r\n  \r\n  \r\n  /**\r\n   * Función para realizar la busqueda mediante el componente search\r\n   * @param {*} series \r\n   * @returns Parametros de la busqueda\r\n   */\r\n  const search = (videos) => {\r\n    if (!query) {\r\n      return videos\r\n    }\r\n    else if (query) {\r\n      contenedorCarousel.style.visibility = 'hidden'\r\n      contenedorCarousel.style.height = '10px';\r\n      const queryLowerCase = query.toLowerCase();\r\n      return videos.filter((dato) => {\r\n        const titleMatches = dato.title_espanol\r\n          .toString()\r\n          .toLowerCase()\r\n          .indexOf(queryLowerCase) > -1;\r\n  \r\n        if (!titleMatches) {\r\n          const descriptionMatches = dato.categorias.some((categoria) =>\r\n          categoria.categoria.toLowerCase().includes(queryLowerCase)\r\n        );\r\n          return descriptionMatches\r\n        }\r\n        return titleMatches\r\n      })\r\n    }\r\n     else {      \r\n      return videos.filter((dato)=>\r\n      dato.categorias.categoria.toString()\r\n      .toLowerCase()\r\n      .indexOf(query.toLowerCase()) > -1\r\n      )\r\n    }\r\n    \r\n  };\r\n  /**\r\n   * Función para realizar el filtro por categoria\r\n   * @param {*} categories \r\n   * @returns Resultado del filtro\r\n   */\r\n  const search2 = (categories) => {\r\n    return categories.filter((item) => {\r\n      if (item.categoria === filterParam) {\r\n        contenedorCarousel.style.visibility = \"hidden\";\r\n        contenedorCarousel.style.height = \"10px\";\r\n\r\n        return searchParam2.some((parameter) => {\r\n          return (\r\n            item[parameter]\r\n              .toString()\r\n              .toLowerCase()\r\n              .indexOf(query.toLowerCase()) > -1\r\n          );\r\n        });\r\n      }\r\n      // eslint-disable-next-line eqeqeq\r\n      else if (filterParam == \"All\") {\r\n        contenedorCarousel.style.visibility = \"visible\";\r\n        contenedorCarousel.style.height = \"100%\";\r\n        return series.filter((item) => {\r\n          return searchParam.some((parameter) => {\r\n            return (\r\n              item[parameter]\r\n                .toString()\r\n                .toLowerCase()\r\n                .indexOf(query.toLowerCase()) > -1\r\n            );\r\n          });\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  if (user && series) {\r\n    if (user.is_superuser) {\r\n      return (\r\n        <div>\r\n          <SearchComponent\r\n            query={query}\r\n            setQuery={setQuery}\r\n            filterParam={filterParam}\r\n            setFilterParam={setFilterParam}\r\n            categories={categories}\r\n          ></SearchComponent>\r\n          <ErrorBoundary>\r\n            <VideosListUser2\r\n              videos={series}\r\n              categories={categories}\r\n              search={search}\r\n              search2={search2}\r\n            />\r\n          </ErrorBoundary>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <SearchComponent\r\n          query={query}\r\n          setQuery={setQuery}\r\n          filterParam={filterParam}\r\n          setFilterParam={setFilterParam}\r\n          categories={categories}\r\n        ></SearchComponent>\r\n        <ErrorBoundary>\r\n        <VideosListUser2\r\n            videos={series}\r\n            categories={categories}\r\n            search={search}\r\n            search2={search2}\r\n          />\r\n        </ErrorBoundary>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <p style={{ fontSize: \"25px\" }}>Inicia sesión para ver todos los videos!</p>\r\n  );\r\n};\r\n\r\nexport default SeriesList;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n//import { Link } from 'react-router-dom';\r\n//dependencies\r\nimport * as SerieServer from \"../services/serie\";\r\nimport * as TemporadaServer from \"../services/temporada\";\r\nimport * as VideoServer from \"../services/videoServer\";\r\nimport * as HistorialUserServer from \"../services/historialUser\";\r\n\r\nimport SeriesList from \"../components/videos/series\";\r\nimport VideoLoadingComponent from \"../components/videos/videoLoading\";\r\n//components\r\nimport { Container } from \"@material-ui/core\";\r\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\r\nimport 'react-lazy-load-image-component/src/effects/blur.css'\r\n\r\n/**\r\n * Carga todos los videos que sean 'Series' para el modulo Series de la aplicación\r\n */\r\nfunction AppSeries() {\r\n  const VideoLoading = VideoLoadingComponent(SeriesList);\r\n  const history = useNavigate();\r\n  const [histUsers, setHistUsers] = useState();\r\n  const data = localStorage.getItem(\"user\");\r\n  const user = JSON.parse(data);\r\n  const [series, setSeries] = useState([]);\r\n  const [videos, setVideos] = useState([]);\r\n  const [idSerie, setIdSerie] = useState(0);\r\n  const [temporadas, setTemporadas] = useState([]);\r\n  const [idTemporada, setIdTemporada] = useState(0);\r\n  const [appState, setAppState] = useState({\r\n    loading: true,\r\n    videos: null,\r\n  });\r\n  const [videoCounts, setVideoCounts] = useState({});\r\n\r\n  useEffect(() => {\r\n    const getSeries = async () => {\r\n      // 🔹 Establecer el estado de carga en true antes de la petición\r\n      setAppState({ loading: true });\r\n  \r\n      try {\r\n        const res = await SerieServer.ListSeries();\r\n        setSeries(res); \r\n      } catch (error) {\r\n        console.error(\"Error cargando series:\", error);\r\n      }\r\n  \r\n      // 🔹 Una vez que termina la carga, establecemos loading en false\r\n    };\r\n  \r\n    getSeries();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getTemporadas = async () => {\r\n      const res = await TemporadaServer.ListTemporadas();\r\n      const temporadas = res;\r\n      setTemporadas(temporadas);\r\n    };\r\n    getTemporadas();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchVideoCounts = async () => {\r\n      const counts = {};\r\n      for (const serie of series) {\r\n        counts[serie.id] = await getTotalVideosSerie(serie.id);\r\n      }\r\n      setVideoCounts(counts);\r\n    };\r\n\r\n    if (series.length > 0) {\r\n      fetchVideoCounts();\r\n\r\n    }\r\n  }, [series]);\r\n\r\n  const getHistorialUsers = async () => {\r\n    try {\r\n      const res = await HistorialUserServer.ListHistorial();\r\n      setHistUsers(res);\r\n      setAppState({ loading: false });\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    \r\n    getHistorialUsers();\r\n  }, []);\r\n\r\n  /**\r\n   * Función para redireccionar al reproductor del video seleccionado, se crea un nuevo historial de usuario si es la primera vez en ver el video, de lo contrario se envía este historial como state\r\n   * @param {*} id\r\n   */\r\n/*   const entrarVideo = async (id) => {\r\n    const formData = new FormData();\r\n    let histUser;\r\n    let contador = 0;\r\n    formData.append(\"usuario\", user.id);\r\n    formData.append(\"video\", id);\r\n    try {\r\n      for (let index = 0; index < histUsers.length; index++) {\r\n        const element = histUsers[index];\r\n        if (element.usuario.id === user.id && element.video === id) {\r\n          histUser = element;\r\n          contador++;\r\n        }\r\n      }\r\n      if (contador === 0) {\r\n        const hu = await HistorialUserServer.RegisterHistorialUser(formData);\r\n        histUser = hu.data;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    history(`/seeVideo/${id}`, { state: histUser });\r\n  }; */\r\n\r\n  const entrarTemporada = (temporadaId) => {\r\n    if (!histUsers) {\r\n      console.warn(\"Historial de usuarios aún no ha cargado\");\r\n      return;\r\n    }\r\n    history(`/seeTemporada/${temporadaId}`, { state: histUsers });\r\n  };\r\n  \r\n  \r\n  const entrarSerie = (serieId) => {\r\n    if (!histUsers) {\r\n      console.warn(\"Historial de usuarios aún no ha cargado\");\r\n      return;\r\n    }\r\n    history(`/seeSerie/${serieId}`, { state: histUsers });\r\n    setIdSerie(serieId);\r\n\r\n\r\n  };\r\n \r\n  const getTotalVideosSerie = async (idSerie) => {\r\n    const res = await VideoServer.ListVideos();\r\n    console.log(res);\r\n    const videos = res.videos.filter(video => video.tipe_of_video == 2 && video.serie == idSerie && video.state == 1);\r\n    console.log(videos);\r\n    return videos.length;\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-flex justify-content-center\">\r\n      <div style={{ maxWidth: \"1450px\", minWidth: \"50%\", padding: \"20px\" }}>\r\n        {appState.loading ? (<VideoLoading isLoading={appState.loading} series={series} />) : (\r\n          <>\r\n          <div className=\"d-flex justify-content-end\">\r\n              <button onClick={() => window.history.back()} className=\"btn btn-light mt-4\" value=\"Volver\">Volver</button>\r\n            </div>\r\n            <h2 className=\"px-2 mb-3\">Listado de Series</h2>\r\n            <div className=\"d-flex flex-wrap\">\r\n              {histUsers &&\r\n              series.map((serie, index) => {\r\n                return (\r\n                  <div className=\"border rounded cursorPointer card-width p-2 m-3\" key={index}>\r\n                    <div onClick={() => { entrarSerie(serie.id) }}>\r\n                      {videoCounts[serie.id] > 0 &&\r\n                      <div className=\"d-flex justify-content-end mb-1\"><small> {videoCounts[serie.id] || ''} Videos</small></div>\r\n                      }\r\n                      <LazyLoadImage effect=\"blur\" src={'https://sccotview.com' + serie.featured_image} className=\"rounded mb-2\" alt=\"\" />\r\n                      <h5 className=\"text-capitalize truncate-text\">{serie.serie}</h5>\r\n                      <small className=\"truncate-text mb-0\">{serie.description}</small>\r\n                    </div>\r\n                    <div>\r\n                      {temporadas.map((temporada, index) => {\r\n                        if (serie.id === temporada.serie) {\r\n                          return (\r\n                            <div key={index}>\r\n                              {/* Aquí puedes agregar más contenido de la temporada si es necesario */}\r\n                            </div>\r\n                          );\r\n                        }\r\n                        return null;\r\n                      })}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })\r\n              }\r\n            </div>\r\n          </>\r\n        )}\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppSeries;\r\n","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"https://sccotview.com/api/series/\";\r\n\r\n/**\r\n * Función para consultar todas las series registradas en la base de datos.\r\n * @returns Data enviada desde el backend\r\n */\r\nexport const ListSeries = async () => {\r\n  const response = await axiosInstance.get(API_URL);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const RegisterSerie = async (newSerie) => {\r\n  const response = await axiosInstance.post(API_URL, newSerie);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const getSerie = async (serieID) => {\r\n  const response = await axiosInstance.get(`${API_URL}${serieID}`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\n\r\nexport const updateSerie = async(id,updSerie) =>{\r\n  const response = await axiosInstance.patch(API_URL+id+\"/\",updSerie);\r\n  if (response.status === 200) {\r\n      return response.data;\r\n  }\r\n}","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"https://sccotview.com/api/temporadas/\";\r\n\r\n/**\r\n * Función para consultar todas las temporadas registradas en la base de datos.\r\n * @returns Data enviada desde el backend\r\n */\r\nexport const ListTemporadas = async () => {\r\n  const response = await axiosInstance.get(API_URL);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const RegisterTemporada = async (newTemporada) => {\r\n  const response = await axiosInstance.post(API_URL, newTemporada);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const getTemporada = async (temporadaID) => {\r\n  const response = await axiosInstance.get(`${API_URL}${temporadaID}`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const updateTemporada = async(id,updTemporada) =>{\r\n  const response = await axiosInstance.patch(API_URL+id+\"/\",updTemporada);\r\n  if (response.status === 200) {\r\n      return response.data;\r\n  }\r\n}"],"names":["series","contenedorCarousel","document","getElementById","useState","query","setQuery","categories","setCategories","searchParam","searchParam2","filterParam","setFilterParam","data","localStorage","getItem","user","JSON","parse","listCategorias","ListCategorias","res","console","log","useEffect","search","videos","style","visibility","height","queryLowerCase","toLowerCase","filter","dato","titleMatches","title_espanol","toString","indexOf","categorias","some","categoria","includes","search2","item","parameter","is_superuser","fontSize","VideoLoading","VideoLoadingComponent","SeriesList","history","useNavigate","histUsers","setHistUsers","setSeries","setIdSerie","temporadas","setTemporadas","loading","appState","setAppState","videoCounts","setVideoCounts","getSeries","SerieServer","error","getTemporadas","TemporadaServer","fetchVideoCounts","counts","serie","getTotalVideosSerie","id","length","getHistorialUsers","HistorialUserServer","idSerie","VideoServer","video","tipe_of_video","state","className","maxWidth","minWidth","padding","isLoading","onClick","window","back","value","map","index","serieId","warn","LazyLoadImage","effect","src","featured_image","alt","description","temporada","API_URL","ListSeries","axiosInstance","response","status","RegisterSerie","newSerie","getSerie","serieID","updateSerie","updSerie","ListTemporadas","RegisterTemporada","newTemporada","getTemporada","temporadaID","updateTemporada","updTemporada"],"sourceRoot":""}