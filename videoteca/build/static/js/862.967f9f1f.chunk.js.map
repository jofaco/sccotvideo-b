{"version":3,"file":"static/js/862.967f9f1f.chunk.js","mappings":"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","sources":["axios.js","components/series/serieVDetail.js","hooks/useModal.js","services/commentary.js","services/historialUser.js","services/serie.js","services/temporada.js","services/videoServer.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { Buffer } from \"buffer\";\r\n\r\nconst API_URL = \"https://sccotview.com/api/\";\r\n\r\n/**\r\n * Lista de endpoints que no requieren autenticación\r\n * Puedes ajustar esto según los endpoints de tu backend que son públicos.\r\n */\r\nconst PUBLIC_ENDPOINTS = [\r\n  \"free/\",\r\n  \"free\",         // Para GET general de videos\r\n           // Para GET general de series\r\n];\r\n\r\n/**\r\n * Instancia de Axios para hacer peticiones al backend\r\n */\r\nconst token = localStorage.getItem(\"access_token\");\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: API_URL,\r\n  timeout: 5000,\r\n  headers: {\r\n    \"Content-Type\": \"multipart/form-data\",  // Cambiado según tu observación\r\n    accept: \"application/json\",\r\n  },\r\n});\r\n\r\n\r\n/**\r\n * Interceptor de request para agregar el token solo si la ruta NO es pública\r\n */\r\naxiosInstance.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem(\"access_token\");\r\n\r\n  // Detectar si la URL es pública\r\n  const isPublic = PUBLIC_ENDPOINTS.some(endpoint => config.url.includes(endpoint));\r\n\r\n  if (token && !isPublic) {\r\n    config.headers[\"Authorization\"] = \"JWT \" + token;\r\n  } else {\r\n    delete config.headers[\"Authorization\"]; // Asegura que no se mande nada si no es necesario\r\n  }\r\n\r\n  return config;\r\n});\r\n\r\n/**\r\n * Interceptor de respuesta para manejar expiración del token\r\n */\r\naxiosInstance.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  async function (error) {\r\n    const originalRequest = error.config;\r\n\r\n    if (typeof error.response === \"undefined\") {\r\n      console.warn(\r\n        \"A server/network error occurred. \" +\r\n        \"Looks like CORS might be the problem.\"\r\n      );\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    if (\r\n      error.response.status === 401 &&\r\n      originalRequest.url === API_URL + \"api/token/refresh/\"\r\n    ) {\r\n      window.location.href = \"/userlogin1/\";\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    if (\r\n      error.response.data.code === \"token_not_valid\" &&\r\n      error.response.status === 401 &&\r\n      error.response.statusText === \"Unauthorized\"\r\n    ) {\r\n      const refreshToken = localStorage.getItem(\"refresh_token\");\r\n\r\n      if (refreshToken) {\r\n        const tokenParts = JSON.parse(\r\n          Buffer.from(refreshToken.split(\".\")[1], \"base64\").toString()\r\n        );\r\n\r\n        const now = Math.ceil(Date.now() / 1000);\r\n\r\n        if (tokenParts.exp > now) {\r\n          try {\r\n            const response = await axiosInstance.post(\"api/token/refresh/\", {\r\n              refresh: refreshToken,\r\n            });\r\n\r\n            localStorage.setItem(\"access_token\", response.data.access_token);\r\n            localStorage.setItem(\"refresh_token\", response.data.refresh_token);\r\n\r\n            axiosInstance.defaults.headers[\"Authorization\"] =\r\n              \"JWT \" + response.data.access_token;\r\n            originalRequest.headers[\"Authorization\"] =\r\n              \"JWT \" + response.data.access_token;\r\n\r\n            return axiosInstance(originalRequest);\r\n          } catch (err) {\r\n            console.log(err);\r\n          }\r\n        } else {\r\n          console.log(\"Refresh token is expired\", tokenParts.exp, now);\r\n          localStorage.clear();\r\n          window.location.href = \"/userlogin2/\";\r\n        }\r\n      } else {\r\n        console.log(\"Refresh token not available.\");\r\n        localStorage.clear();\r\n        window.location.href = \"/userlogin3/\";\r\n      }\r\n    }\r\n\r\n    if (error.response.status === 401) {\r\n      localStorage.clear();\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosInstance;","import { useEffect, useState } from \"react\";\r\nimport {useLocation, useNavigate} from 'react-router-dom';\r\nimport { useParams } from \"react-router-dom\";\r\n\r\n//dependencias\r\nimport * as VideoServer from \"../../services/videoServer\";\r\nimport * as SerieServer from \"../../services/serie\";\r\nimport * as TemporadaServer from \"../../services/temporada\";\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\nimport 'react-lazy-load-image-component/src/effects/blur.css'\r\n\r\nimport * as HistorialUserServer from \"../../services/historialUser\";\r\nimport * as commentaryServer from \"../../services/commentary\";\r\nimport { useModal } from \"../../hooks/useModal\";\r\n\r\n//MaterialUI\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from '@mui/material/Button';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport StarIcon from \"@mui/icons-material/Star\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport StarBorderIcon from \"@mui/icons-material/StarBorder\";\r\nimport Stack from '@mui/material/Stack';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Rating from '@mui/material/Rating';\r\n\r\n//components\r\nimport \"../../styles/styles.css\";\r\nimport { Link } from \"@material-ui/icons\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(0),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  \r\n}));\r\n/**\r\n * Función para mostrar el detalle de un video y guardar la puntuación.\r\n * @returns Componente que muestra el detalle de un video junto con el iframe\r\n */\r\nconst SerieVDetail = () => {\r\n  const history = useNavigate();\r\n  const [show, handleShow, handleClose] = useModal(false);\r\n  const [show2, handleShow2, handleClose2] = useModal(false);\r\n  const [histUsers, setHistUsers] = useState();  \r\n\r\n  const location = useLocation();\r\n  const { id } = useParams();\r\n  const [video, setVideo] = useState([]);\r\n  const [serie, setSerie] = useState([]);\r\n  const [temporada,setTemporada] = useState([]);\r\n  const [duracion, setDuracion] = useState([]);\r\n  const [uploadDate, setUploadDate] = useState(null);\r\n  const [histUser, setHistUser] = useState(location.state);\r\n  const [commentaries, setCommentaries] = useState([]);\r\n  const [activeStar, setActiveStar] = useState(-1);\r\n  const [cantidadVideosSerie, setCantidadVideosSerie] = useState(1);\r\n  const totalStars = 5;\r\n  const [videos, setVideos] = useState([]);\r\n  const [temporadas, setTemporadas] = useState([]);\r\n  const [idTemporada,setIdTemporada] = useState(0);\r\nconst arra = [1,2,3]\r\n  \r\n  useEffect(() => {\r\n    const getSerie = async () => {\r\n      const res = await SerieServer.getSerie(id);\r\n      const serie = res;\r\n      //console.log(serie);\r\n\r\n      setSerie({\r\n        ...serie,\r\n      });\r\n    };\r\n    getSerie();\r\n\r\n  }, []);\r\n    useEffect(() => {\r\n    const getTemporadas = async () => {\r\n    const res = await TemporadaServer.ListTemporadas()\r\n    const temporada = res;\r\n    setTemporada(temporada)\r\n    setTemporadas(temporada)\r\n   // console.log(serie);\r\n};\r\ngetTemporadas()\r\n\r\n  }, []);\r\n  \r\n\r\n  useEffect(() => {\r\n    const getVideos = async () => {\r\n    const res = await VideoServer.ListVideos()\r\n    const videos = res;\r\n        setVideo(videos.videos)\r\n    };\r\n    getVideos()\r\n\r\n  }, []);\r\n\r\n  const getHistorialUsers = async () => {\r\n    try {\r\n      const res = await HistorialUserServer.ListHistorial();\r\n      setHistUsers(res[0]);// aqui se le coloco el [0] porque si no me estaria llamando a todos los usuarios\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getHistorialUsers();\r\n  }, []);\r\n\r\n  const entrarTemporada = (temporadaId) => {\r\n    if (!histUsers) {\r\n      console.warn(\"Historial de usuarios aún no ha cargado\");\r\n      return;\r\n    }\r\n    history(`/seeTemporada/${temporadaId}`, { state: histUsers });\r\n  };\r\n  \r\n\r\n  const entrarVideo = (videoId)=>{\r\n    history(`/seeVideo/${videoId}`,{state:histUsers});\r\n  }\r\n  \r\n\r\n   useEffect(() => {      \r\n    if (histUser) {\r\n      setActiveStar(histUser.user_score-1);\r\n    } else {\r\n      history(\"/loginuser\");      \r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []) \r\n\r\n  /**\r\n   * Función para cambiar la calificación del video.\r\n   * @param {int} index \r\n   */\r\n  const handleClick = async (index) => {\r\n    setActiveStar(index);\r\n    let cumulative_score = video.cumulative_score;\r\n    let number_votes = video.numberOfVotes;\r\n\r\n    if (histUser.user_score) {\r\n      cumulative_score = cumulative_score - histUser.user_score + index+1;\r\n      const score_video = cumulative_score/number_votes;\r\n      setHistUser({...histUser, user_score:index+1});\r\n      await VideoServer.partialUpdateVideo(video.id, {'cumulative_score': cumulative_score, 'score': score_video})\r\n\r\n    } else {\r\n      number_votes +=1;\r\n      cumulative_score = cumulative_score + index+1;\r\n      const score_video = cumulative_score/number_votes;\r\n      setHistUser({...histUser, user_score:index+1});\r\n      await VideoServer.partialUpdateVideo(video.id, {'cumulative_score': cumulative_score,'numberOfVotes': number_votes,'score': score_video})\r\n    }\r\n    await HistorialUserServer.updateHistorialUser(histUser.id,{'user_score': index+1});\r\n\r\n  };\r\n  \r\n  if (histUser) {\r\n    //console.log(temporada);\r\n\r\n        return (\r\n            <div>\r\n                {/* <div className=\"d-flex justify-content-end mb-4\">\r\n                  <button  onClick={() => window.history.back()} className=\"btn btn-light mt-4 position-absolute \" value=\"Volver\">Volver</button>\r\n                </div> */}\r\n                <div className=\"\" style={\r\n                  {\r\n                    backgroundColor:'transparent',\r\n                    borderRadius:20\r\n                  }\r\n                }>\r\n                <div className=\"\">\r\n                  {/* Imagen de fondo */}\r\n                  <div style={{\r\n                  position: \"relative\",\r\n                  top:\"-24px\",\r\n                  width: \"100%\",\r\n                  minHeight: \"800px\",\r\n              }}>\r\n                  <LazyLoadImage \r\n                    \r\n                      src={`https://sccotview.com${serie.featured_image}`} \r\n                      alt=\"Featured\" \r\n                      style={{\r\n                          position: \"absolute\",\r\n                          left: 0,\r\n                          width: \"100%\",\r\n                      height:\"100%\",\r\n                      minHeight:\"500px\",\r\n                          objectFit: 'cover',\r\n                      }}\r\n                  />\r\n                  <div style={{\r\n                      position: \"absolute\",\r\n                      top: 0,\r\n                      left: 0,\r\n                      width: \"100%\",\r\n                      height:\"100%\",\r\n                      padding:\"50px 40px 0\",\r\n                      boxShadow: 'inset 600px -350px 700px -0px rgba(24, 26, 54, 1)', // Aplicar el box-shadow interno\r\n                      zIndex: 10, // Asegurar que el box-shadow esté encima de la imagen\r\n                  }}>\r\n                    {/* Contenido */}\r\n                  <div className=\"info-serie\" style={{\r\n                      position: \"relative\", // Asegúrate de que el contenido esté por encima del fondo\r\n                      zIndex: 1, // Asegúrate de que el contenido esté en la parte superior\r\n                  }}>\r\n                      <div className=\"d-flex justify-content-between\">\r\n                        <div >\r\n                          <small className=\"d-inline border-bottom border-light\">Serie</small>\r\n                        </div>\r\n                        <div>\r\n                          <button  onClick={() => window.history.back()} className=\"btn btn-light mt-4 border border-2 border-dark\" value=\"Volver\">Volver</button>\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      <h2 className=\"py-3\">{serie.serie}</h2>\r\n                      \r\n                      <div style={{\r\n                          overflowY: \"scroll\",\r\n                          maxWidth: \"550px\",\r\n                          zIndex: 20, // Asegurar que el box-shadow esté encima de la imagen\r\n                          height:\"320px\",\r\n                          paddingRight:\"20px\"\r\n                      }}>\r\n                          <p>{serie.description}</p>\r\n                      </div>\r\n                      \r\n                      <div className=\"d-flex justify-content-end\">\r\n                          {/* <div className=\"bg-light text-dark rounded-2 mb-2 p-2 d-inline px-2\">\r\n                              Cantidad de videos: {serie.quantity}\r\n                          </div> */}\r\n                      </div>\r\n                      \r\n                      <div className=\"d-flex justify-content-end\">\r\n                          {/* <input type=\"button\" value=\"Calificar serie\" className=\"btn btn-outline-warning mt-3 py-2\"/> */}\r\n                      </div>\r\n                  </div>\r\n                  {/* <p>⭐⭐⭐</p> */}\r\n                  <div className=\"d-flex flex-wrap\" style={\r\n                  {\r\n                    marginTop:\"20px\"\r\n                  }\r\n                }>\r\n                {histUsers ? (\r\n  temporadas.map((temporada, index) => (\r\n    <div\r\n      className=\"border-2 card-temporada bg-light border text-dark p-3 m-3 rounded card-width cursorPointer\"\r\n      key={temporada.id}\r\n      onClick={() => entrarTemporada(temporada.id)}\r\n    >\r\n      <small>Temporada {index + 1}</small>\r\n      <h4 className=\"truncate-text border-bottom border-primary pb-3\">\r\n        {temporada.temporada}\r\n      </h4>\r\n      <p className=\"truncate-text-6\" style={{ fontSize: 13 }}>\r\n        {temporada.description}\r\n      </p>\r\n    </div>\r\n  ))\r\n) : (\r\n <p></p>\r\n)}\r\n\r\n                    \r\n\r\n                    \r\n                </div>\r\n                  </div>\r\n              </div>\r\n\r\n                  \r\n</div>\r\n                \r\n\r\n\r\n                \r\n                </div>\r\n\r\n            </div>\r\n        );\r\n\r\n  }\r\n  return (\r\n    <p style={{ fontSize: \"25px\" }}>Inicia sesión para ver todos los videos!</p>\r\n  );\r\n};\r\n\r\nexport default SerieVDetail;\r\n","import { useState } from 'react';\r\n\r\n\r\nexport const useModal = (initialValue = false) => {\r\n  const [show, setShow] = useState(initialValue);\r\n\r\n  const handleShow = () => setShow(true); //función para mostrar el modal de comentario.\r\n  const handleClose = () => setShow(false); //función para cerrar el modal de comentario.\r\n\r\n  return [show, handleShow, handleClose];\r\n}\r\n\r\n\r\n","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"https://sccotview.com/api/commentaries/\";\r\n\r\n/**\r\n * Función para agregar un nuevo comentario a un video.\r\n * @param {formdata} newCommentary \r\n * @returns data enviada desde el backend\r\n */\r\nexport const RegisterCommentary = async (newCommentary) => {\r\n    const response = await axiosInstance.post(API_URL, newCommentary);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n/**\r\n * Función para entontrar todos los comentarios realizados.\r\n * @returns data enviada desde el backend-\r\n */\r\nexport const ListCommentaries = async () => {\r\n    const response = await axiosInstance.get(`${API_URL}`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n\r\nexport const ListCommentaryVideo = async (idVideo) => {\r\n    const response = await axiosInstance.post(`${API_URL}list_by_video/`,idVideo);\r\n    //console.log(response);\r\n    \r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n    else { \r\n        console.log(\"error\");\r\n        return await response.data;\r\n    }\r\n  };\r\n/**\r\n * Función para obtener un comentario en específico.\r\n * @param {pk} commentaryID \r\n * @returns data enviada desde el backend\r\n */\r\nexport const getCommentary = async (commentaryID) => {\r\n    const response = await axiosInstance.get(`${API_URL}${commentaryID}`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n\r\n/**\r\n * Función para actualizar un comentario .\r\n * @param {pk} id \r\n * @param {formdata} updCommentary \r\n * @returns data enviada desde el backend\r\n */\r\nexport const updateCommentary = async(id,updCommentary) =>{\r\n    const response = await axiosInstance.patch(API_URL+id+\"/\",updCommentary);\r\n    if (response.status === 200) {\r\n        return response.data;\r\n    }\r\n}","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"https://sccotview.com/api/historialUser/\";\r\n\r\n/**\r\n * Función para agregar un nuevo historial de usuario.\r\n * @param {formdata} newHistorial \r\n * @returns data enviada desde el backend\r\n */\r\nexport const RegisterHistorialUser = async (newHistorial) => {\r\n    const response = await axiosInstance.post(API_URL, newHistorial);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n/**\r\n * Función para entontrar todos los historiales de usuarios.\r\n * @returns data enviada desde el backend-\r\n */\r\nexport const ListHistorial = async () => {\r\n    const response = await axiosInstance.get(`${API_URL}`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n\r\nexport const ListHistorial4Comments = async () => {\r\n    const response = await axiosInstance.get(`${API_URL}list_4_comments/`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n  \r\n/**\r\n * Función para obtener un historial en específico.\r\n * @param {pk} histID \r\n * @returns data enviada desde el backend\r\n */\r\nexport const getHistorial = async (histID) => {\r\n  //console.log(histID);\r\n    const response = await axiosInstance.get(`${API_URL}${histID}`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n/**\r\n * Función para listar el historial de un usuario en específico.\r\n * @param {fk} idUser \r\n * @returns data enviada desde el backend\r\n */\r\nexport const ListHistorialUser = async (idUser) => {\r\n    const response = await axiosInstance.post(`${API_URL}list_by_user/`,idUser);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n\r\n/**\r\n * Función para actualizar un historial de usuario.\r\n * @param {pk} id \r\n * @param {formdata} updateHU \r\n * @returns data enviada desde el backend\r\n */\r\nexport const updateHistorialUser = async(id,updateHU) =>{\r\n    const response = await axiosInstance.patch(API_URL+id+\"/\",updateHU);\r\n    if (response.status === 200) {\r\n        return response.data;\r\n    }\r\n}","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"https://sccotview.com/api/series/\";\r\n\r\n/**\r\n * Función para consultar todas las series registradas en la base de datos.\r\n * @returns Data enviada desde el backend\r\n */\r\nexport const ListSeries = async () => {\r\n  const response = await axiosInstance.get(API_URL);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const RegisterSerie = async (newSerie) => {\r\n  const response = await axiosInstance.post(API_URL, newSerie);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const getSerie = async (serieID) => {\r\n  const response = await axiosInstance.get(`${API_URL}${serieID}`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\n\r\nexport const updateSerie = async(id,updSerie) =>{\r\n  const response = await axiosInstance.patch(API_URL+id+\"/\",updSerie);\r\n  if (response.status === 200) {\r\n      return response.data;\r\n  }\r\n}","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"https://sccotview.com/api/temporadas/\";\r\n\r\n/**\r\n * Función para consultar todas las temporadas registradas en la base de datos.\r\n * @returns Data enviada desde el backend\r\n */\r\nexport const ListTemporadas = async () => {\r\n  const response = await axiosInstance.get(API_URL);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const RegisterTemporada = async (newTemporada) => {\r\n  const response = await axiosInstance.post(API_URL, newTemporada);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const getTemporada = async (temporadaID) => {\r\n  const response = await axiosInstance.get(`${API_URL}${temporadaID}`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const updateTemporada = async(id,updTemporada) =>{\r\n  const response = await axiosInstance.patch(API_URL+id+\"/\",updTemporada);\r\n  if (response.status === 200) {\r\n      return response.data;\r\n  }\r\n}","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"https://sccotview.com/api/videos/\";\r\n\r\n/**\r\n * Función para consultar con el backend la lista de todos los videos sin filtrar.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const ListVideos = async () => {\r\n  const response = await axiosInstance.get(`${API_URL}`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\nexport const ListWebinars = async () => {\r\n  const response = await axiosInstance.get(`${API_URL}public/webinars/`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\nexport const ListVideosPublic = async () => {\r\n  const response = await axiosInstance.get(`${API_URL}public/`);\r\n  if (response.status === 200) {\r\n    //console.log(response.data);\r\n    \r\n    return response.data;\r\n  }\r\n};\r\n/**\r\n * Función para consultar con el backend la lista de videos con el tipo Peliculas.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const ListPeliculas = async () => {\r\n  const response = await axiosInstance.get(`${API_URL}listPeliculas/`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n}\r\n/**\r\n * Función para consultar con el backend la lista de videos con el tipo Peliculas.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const ListVideosPorTemporada = async (temporadaId) => {\r\n  const response = await axiosInstance.get(`${API_URL}videostemporada/${temporadaId}`);\r\n  //console.log(response.data);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n}\r\n/**\r\n * Función para consultar con el backend la lista de videos con el tipo Series.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const ListSeries = async () => {\r\n  const response = await axiosInstance.get(`${API_URL}listSeries/`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n}\r\n/**\r\n * Función para consultar con el backend la lista de videos con el tipo Casos.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const ListCasos = async () => {\r\n  const response = await axiosInstance.get(`${API_URL}listCasos/`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n}\r\n/**\r\n * Función para consultar con el backend un video con el id específico.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const getVideo = async (videoID) => {\r\n  const response = await axiosInstance.get(`${API_URL}${videoID}`);\r\n  //console.log(response.data);\r\n  \r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n/**\r\n * Función para consultar con el backend un video con el id específico. Esta función se usa para tener los datos del video en el formulario de update.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const getVideoDT = async (videoID) => {\r\n  const response = await axiosInstance.get(API_URL + \"retrieve/\" + videoID);\r\n  if (response.status === 200) {\r\n    return response.data;\r\n  }\r\n};\r\n/**\r\n * Función Post para enviar los datos del formulario de registro de un nuevo video.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const RegisterVideo = async (newVideo) => {\r\n  const response = await axiosInstance.post(API_URL, newVideo);\r\n // console.log(response);\r\n  \r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n  else if(response.status === 409) {\r\n    return await response.data;\r\n  }\r\n};\r\n/**\r\n * Función para actualizar un video.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const UpdateVideo = async (videoID, updateVideo) => {\r\n  const response = await axiosInstance.put(\r\n    API_URL + videoID + \"/\",\r\n    updateVideo\r\n  );\r\n  //console.log(response);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const partialUpdateVideo = async(id,PupdateVideo) =>{\r\n  const response = await axiosInstance.patch(API_URL+id+\"/\",PupdateVideo);\r\n  if (response.status === 200) {\r\n      return response.data;\r\n  }\r\n}\r\n/**\r\n * Función para eliminar un video.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const DeleteVideo = async (videoID) => {\r\n  return await axiosInstance.delete(`${API_URL}${videoID}`);\r\n\r\n};\r\n","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}"],"names":["API_URL","PUBLIC_ENDPOINTS","axiosInstance","localStorage","getItem","axios","baseURL","timeout","headers","accept","interceptors","request","use","config","token","isPublic","some","endpoint","url","includes","response","error","originalRequest","console","warn","Promise","reject","status","window","location","href","data","code","statusText","refreshToken","tokenParts","JSON","parse","Buffer","split","toString","now","Math","ceil","Date","exp","post","refresh","setItem","access_token","refresh_token","defaults","log","clear","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","history","useNavigate","useModal","useState","histUsers","setHistUsers","useLocation","id","useParams","setVideo","serie","setSerie","setTemporada","state","histUser","setActiveStar","temporadas","setTemporadas","useEffect","getSerie","SerieServer","res","getTemporadas","TemporadaServer","temporada","getVideos","VideoServer","videos","getHistorialUsers","HistorialUserServer","user_score","className","style","backgroundColor","borderRadius","position","top","width","minHeight","LazyLoadImage","src","featured_image","alt","left","height","objectFit","padding","boxShadow","zIndex","onClick","back","value","overflowY","maxWidth","paddingRight","description","map","index","temporadaId","fontSize","initialValue","show","setShow","handleShow","handleClose","RegisterCommentary","newCommentary","ListCommentaryVideo","idVideo","getCommentary","commentaryID","updateCommentary","updCommentary","RegisterHistorialUser","newHistorial","ListHistorial","getHistorial","histID","ListHistorialUser","idUser","updateHistorialUser","updateHU","ListSeries","RegisterSerie","newSerie","serieID","updateSerie","updSerie","ListTemporadas","RegisterTemporada","newTemporada","getTemporada","temporadaID","updateTemporada","updTemporada","ListVideos","ListWebinars","ListVideosPublic","ListPeliculas","ListCasos","getVideo","videoID","getVideoDT","RegisterVideo","newVideo","UpdateVideo","updateVideo","partialUpdateVideo","PupdateVideo","DeleteVideo","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty"],"sourceRoot":""}