{"version":3,"file":"static/js/137.53fa037d.chunk.js","mappings":"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","sources":["components/videos/comentarioModal.js","services/fechaRepro.js","services/historialVideo.js","components/videos/iframeVideo.js","components/videos/listComentariosModal.js","hooks/useModal.js","services/commentary.js","services/serie.js","services/temporada.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n//dependencias\r\nimport * as commentaryServer from \"../../services/commentary\";\r\n\r\n//components\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport \"../../styles/cloud.css\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  \r\n  containerModal:{\r\n    border: \"2px solid #ccc\",\r\n    borderRadius: 10,\r\n    boxShadow: \"4px 4px 4px 0px #5a28e550\",\r\n  },\r\n  cloud: {\r\n    width: \"25rem\",\r\n    background: \"white\",\r\n    color:\"black\",\r\n    borderRadius: 10,\r\n  },\r\n  containerForm: {\r\n    height:\"3rem\",\r\n    background: \"white\",\r\n    color:\"black\",\r\n    border: \"2px solid #ccc\",\r\n    borderRadius: 10,\r\n    boxShadow: \"4px 4px 4px 0px #5a28e550\",\r\n  },\r\n\r\n  \"@media (max-width: 720px)\": {\r\n    root: {\r\n      display: \"flex\",\r\n    },\r\n  },\r\n}));\r\nconst ModalComentario = ({histUser, handleClose, show, commentary_id, ...props}) => {\r\n  const initialFormData = {commentary:\"\", historial_user:histUser, video:props.videoID};\r\n  const [commentary, setCommentary] = useState(initialFormData);\r\n\r\n  const handleInputChange = (e) => {\r\n    let target = e.target;\r\n    let name = target.name;\r\n    setCommentary({...commentary, [name]: e.target.value });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n\r\n    try {\r\n      if (!commentary_id) {\r\n        formData.append(\"commentary\", commentary.commentary);\r\n        formData.append(\"historial_user\", commentary.historial_user.id);\r\n        formData.append(\"video\", commentary.video);\r\n        await commentaryServer.RegisterCommentary(formData);\r\n      } else {\r\n        formData.append(\"commentary\", commentary.commentary);\r\n        await commentaryServer.updateCommentary(commentary_id, formData);        \r\n      }\r\n      \r\n    } catch (error) {\r\n      console.log(error);      \r\n    }\r\n  }\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    const getCommentary = async (commentary_id) => {\r\n      try {\r\n        const res = await commentaryServer.getCommentary(commentary_id)\r\n        setCommentary({...commentary, commentary: res.commentary})\r\n        //console.log(res);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    if (commentary_id) {\r\n      getCommentary(commentary_id)      \r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [commentary_id])\r\n  \r\n  const classes = useStyles();\r\n  return (\r\n    <Modal \r\n      show={show} \r\n      onHide={handleClose}\r\n      aria-labelledby=\"example-custom-modal-styling-title\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton >\r\n        <Modal.Title id=\"tituloModal\" className=\"text-dark\" >Ingrese su Comentario</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body id=\"bodyModal\" >\r\n        <Form onSubmit={handleSubmit}  >\r\n          <Form.Group className={\"mb-2 \"} controlId=\"exampleForm.ControlInput1\">\r\n            <Form.Control as=\"textarea\" \r\n            className={classes.containerForm}\r\n            rows={1} \r\n            name=\"commentary\"\r\n            value={commentary.commentary || \"\"}\r\n            onChange={handleInputChange} \r\n            />\r\n          </Form.Group>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={handleClose}>\r\n              Cerrar\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\" onClick={handleClose}>\r\n              Crear\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal.Body>\r\n    </Modal>\r\n    \r\n  )\r\n};\r\n\r\nexport default ModalComentario;","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"https://sccotview.com/api/fechaReprods/\";\r\n\r\n/**\r\n * Función para registrar una nueva fecha de reproducción, este tiene relación con el historial de video e historial de usuario.\r\n * @param {formdata} newFecha \r\n * @returns data enviada desde el backend.\r\n */\r\nexport const RegisterFechaRepro = async (newFecha) => {\r\n    const response = await axiosInstance.post(API_URL, newFecha);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n/**\r\n * Función para consultar todas las fechas de reproduccion.\r\n * @returns data enviada desde el backend-\r\n */\r\nexport const ListFechaRepro = async () => {\r\n    const response = await axiosInstance.get(`${API_URL}`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n/**\r\n * Función para consultar una fecha de reproducción en específico.\r\n * @param {pk} histID primary key\r\n * @returns data enviada desde el backend\r\n */\r\nexport const getFechaRepro = async (histID) => {\r\n    const response = await axiosInstance.get(`${API_URL}${histID}`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n/**\r\n * Función para consultar la fecha de reproducción correspondiente a un usuario y video.\r\n * @param {formdata} data \r\n * @returns data enviada desde el backend\r\n */\r\nexport const ListFechaReprox2 = async (data) => {\r\n    const response = await axiosInstance.post(`${API_URL}list_by_user_video/`,data);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n\r\n/**\r\n * Función para actualizar una fecha de reproducción.\r\n * @param {pk} id \r\n * @param {formdata} updateHU \r\n * @returns data enviada desde el backend\r\n */\r\nexport const updateHistorialVideo = async(id,updateHU) =>{\r\n    const response = await axiosInstance.patch(API_URL+id+\"/\",updateHU);\r\n    if (response.status === 200) {\r\n        return response.data;\r\n    }\r\n}","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"https://sccotview.com/api/historialVideo/\";\r\n\r\n/**\r\n * Función para registrar un historial de video.\r\n * @param {dataform} newHistorial\r\n * @returns data enviada desde el backend.\r\n */\r\nexport const RegisterHistorialVideo = async (newHistorial) => {\r\n    const response = await axiosInstance.post(API_URL, newHistorial);\r\n    if (response.status === 200) {\r\n      //console.log(response.data);\r\n      return await response.data;\r\n    }\r\n  };\r\n/**\r\n * Función para consultar todos los historiales.\r\n * @returns data enviada desde el backend.\r\n */\r\nexport const ListHistorial = async () => {\r\n    const response = await axiosInstance.get(`${API_URL}`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n/**\r\n * Función para obtener un historial en específico.\r\n * @param {pk} histID \r\n * @returns data enviada desde el backend.\r\n */\r\nexport const getHistorial = async (histID) => {\r\n    const response = await axiosInstance.get(`${API_URL}${histID}`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n/**\r\n * Función para obtener el historial de un video en específico.\r\n * @param {fk} idVideo \r\n * @returns data enviada desde el backend.\r\n */\r\nexport const ListHistorialVideo = async (idVideo) => {\r\n    const response = await axiosInstance.post(`${API_URL}list_by_video/`,idVideo);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n\r\n/**\r\n * Función para actualizar un historial de video.\r\n * @param {pk} id \r\n * @param {formdata} updateHU \r\n * @returns data enviada desde el backend\r\n */\r\nexport const updateHistorialVideo = async(id,updateHU) =>{\r\n    const response = await axiosInstance.patch(API_URL+id+\"/\",updateHU);\r\n    if (response.status === 200) {\r\n        return response.data;\r\n    }\r\n}","import { useEffect, useState, useCallback, useRef } from \"react\";\r\nimport { useLocation, useParams } from \"react-router-dom\";\r\nimport Player from \"@vimeo/player\";\r\n\r\n// Servicios\r\nimport * as FechareproServer from \"../../services/fechaRepro\";\r\nimport * as HistorialUserServer from \"../../services/historialUser\";\r\nimport * as HistorialVideoServer from \"../../services/historialVideo\";\r\n\r\nimport \"../../styles/styles.css\";\r\n\r\nconst IframeVideo = ({ video, webinarCondition }) => {\r\n  const [histUser, setHistUser] = useState(null);\r\n  const [histVideo, setHistVideo] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const { id } = useParams();\r\n  const location = useLocation();\r\n  const iframeRef = useRef(null);\r\n  const intervalRef = useRef(null);\r\n\r\n  const getHistUser = async () => {\r\n    try {\r\n      const userId = location?.state?.id || location?.state?.usuario;\r\n      if (!userId) return console.warn(\"No hay datos suficientes para historial\");\r\n      const res = await HistorialUserServer.getHistorial(userId);\r\n      setHistUser(res);\r\n    } catch (error) {\r\n      console.error(\"Error al obtener historial:\", error);\r\n    }\r\n  };\r\n\r\n  const getHistorialVideo = async () => {\r\n    const res = await HistorialVideoServer.ListHistorialVideo({ video_id: id });\r\n    if (res.length > 0) {\r\n      setHistVideo(res);\r\n    } else {\r\n      const formData = new FormData();\r\n      formData.append(\"video\", id);\r\n      const nuevo = await HistorialVideoServer.RegisterHistorialVideo(formData);\r\n      setHistVideo(nuevo);\r\n    }\r\n  };\r\n\r\n  const convertTime = (tiempo) => {\r\n    let [h, m, s] = tiempo.split(\":\").map(Number);\r\n    return h * 3600 + m * 60 + s;\r\n  };\r\n\r\n  const obtenerFecha = () => {\r\n    const f = new Date();\r\n    const day = `${f.getDate()}`.padStart(2, \"0\");\r\n    const month = `${f.getMonth() + 1}`.padStart(2, \"0\");\r\n    const year = f.getFullYear();\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  const repetirCada10Segundos = (player) => {\r\n    intervalRef.current = setInterval(() => saveTime(player), 10000);\r\n  };\r\n\r\n  const saveTime = async (player) => {\r\n    try {\r\n      const duracion = await player.getDuration();\r\n      const tiempo = await player.getCurrentTime();\r\n\r\n      if (tiempo !== 0 && histUser?.id) {\r\n        const validacion = parseInt((duracion * 90) / 100);\r\n        let cont1 = histUser.counter_repro;\r\n        let cont2 = histVideo[0].reproducciones;\r\n\r\n        if (tiempo >= validacion) {\r\n          cont1 += 1;\r\n          cont2 += 1;\r\n          await HistorialUserServer.updateHistorialUser(histUser.id, {\r\n            tiempo: 0,\r\n            visto: true,\r\n            counter_repro: cont1,\r\n          });\r\n          await HistorialVideoServer.updateHistorialVideo(histVideo[0].id, {\r\n            reproducciones: cont2,\r\n          });\r\n        } else {\r\n          await HistorialUserServer.updateHistorialUser(histUser.id, {\r\n            tiempo: parseInt(tiempo),\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error al guardar tiempo:\", error);\r\n    }\r\n  };\r\n\r\n  const getVimeoVideo = useCallback(() => {\r\n    const player = new Player(iframeRef.current, {\r\n      id: video.code_esp,\r\n      playsinline: true,\r\n    });\r\n\r\n    if (!webinarCondition && histUser?.tiempo) {\r\n      const segundos = convertTime(histUser.tiempo);\r\n      player.setCurrentTime(segundos);\r\n    }\r\n\r\n    if (!webinarCondition) {\r\n      player.on(\"play\", async () => {\r\n        try {\r\n          const fechaActual = obtenerFecha();\r\n          const dataFecha = new FormData();\r\n          dataFecha.append(\"historial_user\", histUser.id);\r\n          dataFecha.append(\"historial_Video\", histVideo[0].id);\r\n          const fechasRepro = await FechareproServer.ListFechaReprox2(dataFecha);\r\n\r\n          const yaExisteFecha = fechasRepro.some((f) => f.fecha === fechaActual);\r\n\r\n          if (!yaExisteFecha) {\r\n            await FechareproServer.RegisterFechaRepro({\r\n              historial_user: histUser.id,\r\n              historial_Video: histVideo[0].id,\r\n            });\r\n          }\r\n        } catch (err) {\r\n          console.error(\"Error en evento play:\", err);\r\n        }\r\n      });\r\n\r\n      if (document.URL.includes(\"/seeVideo/\")) {\r\n        repetirCada10Segundos(player);\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, [video.code_esp, histUser, histVideo, webinarCondition]);\r\n\r\n  useEffect(() => {\r\n    getHistUser();\r\n    getHistorialVideo();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const hayDatosParaReproducir =\r\n      video.code_esp && (webinarCondition || (!webinarCondition && histVideo));\r\n\r\n    if (hayDatosParaReproducir) {\r\n      getVimeoVideo();\r\n    } else {\r\n      console.log(\"Esperando datos para getVimeoVideo:\");\r\n    }\r\n  }, [video.code_esp, histUser, histVideo, webinarCondition, getVimeoVideo]);\r\n\r\n  return (\r\n    <>\r\n      {loading && (\r\n        <div className=\"mt-5 d-flex justify-content-center align-items-center\">\r\n          <div className=\"spinner-grow text-light\" role=\"status\">\r\n            <span className=\"sr-only\"></span>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div id=\"iframe1\" ref={iframeRef}></div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IframeVideo;\r\n","import {useEffect, useState}from \"react\";\r\n//dependencias\r\n//import * as commentaryServer from \"../../services/commentary\";\r\nimport { useModal } from \"../../hooks/useModal\";\r\nimport ModalComentario from \"./comentarioModal\";\r\n\r\n//components\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { Button } from \"@mui/material\";\r\nimport Stack from '@mui/material/Stack';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title:{\r\n    color: \"black\",\r\n    textAlign: \"center\",\r\n  },\r\n  nameUser:{\r\n    color:\"Gray\",\r\n    fontSize:\"15px\"\r\n  },\r\n  containerModal:{\r\n    boxShadow: \"4px 4px 4px 0px #5a28e550\",\r\n  },\r\n  containerComment: {\r\n    maxWidth: 720,\r\n    margin: \"auto\",\r\n    marginBottom: 20,\r\n  },\r\n  \"@media (max-width: 720px)\": {\r\n    root: {\r\n      display: \"flex\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst ModalComentarios = ({ handleClose, show, histUser, commentaries,  ...props}) => {\r\n  const [showEdit, handleShowEdit, handleCloseEdit] = useModal(false);\r\n  const classes = useStyles();\r\n  \r\n  if (commentaries) {\r\n    return (\r\n    <Modal \r\n      show={show} \r\n      onHide={handleClose}\r\n      aria-labelledby=\"example-custom-modal-styling-title\"\r\n      contentClassName = {classes.containerModal}\r\n      centered\r\n      scrollable\r\n      \r\n    >\r\n      <Modal.Header closeButton  >\r\n        <Modal.Title id=\"titleModal\" className={classes.title} >Comentarios de usuarios</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body id=\"bodyModal\" className={classes.containerModal}>\r\n      {commentaries && commentaries.length > 0 ? (\r\n  commentaries.map((element, index) => (\r\n    <Container key={index} className={classes.containerComment}>\r\n      <div className=\"row\">\r\n        <div className=\"col-9\">\r\n          <p>{new Date(element.created_date).toLocaleDateString()}</p>\r\n          <h5 className={classes.nameUser}>{element.historial_user.usuario.name}</h5>\r\n          <h6>{element.commentary}</h6>\r\n        </div>\r\n        <div className=\"col-2\">\r\n          {element.historial_user.usuario.id === histUser?.usuario?.id && (\r\n            <Stack alignItems=\"center\">\r\n              <Button \r\n                variant=\"contained\" \r\n                color=\"info\"\r\n                onClick={handleShowEdit}>\r\n                EDITAR \r\n              </Button>\r\n              <ModalComentario\r\n                handleClose={handleCloseEdit}\r\n                show={showEdit}\r\n                commentary_id={element.id}\r\n              />\r\n            </Stack>\r\n          )}\r\n        </div>\r\n        <hr/>\r\n      </div>\r\n    </Container>\r\n  ))\r\n) : (\r\n  <p className=\"text-center text-muted\">No hay comentarios aún.</p>\r\n)}\r\n\r\n      </Modal.Body>\r\n    </Modal>\r\n    )\r\n  }\r\n  \r\n};\r\n\r\nexport default ModalComentarios;","import { useState } from 'react';\r\n\r\n\r\nexport const useModal = (initialValue = false) => {\r\n  const [show, setShow] = useState(initialValue);\r\n\r\n  const handleShow = () => setShow(true); //función para mostrar el modal de comentario.\r\n  const handleClose = () => setShow(false); //función para cerrar el modal de comentario.\r\n\r\n  return [show, handleShow, handleClose];\r\n}\r\n\r\n\r\n","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"https://sccotview.com/api/commentaries/\";\r\n\r\n/**\r\n * Función para agregar un nuevo comentario a un video.\r\n * @param {formdata} newCommentary \r\n * @returns data enviada desde el backend\r\n */\r\nexport const RegisterCommentary = async (newCommentary) => {\r\n    const response = await axiosInstance.post(API_URL, newCommentary);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n/**\r\n * Función para entontrar todos los comentarios realizados.\r\n * @returns data enviada desde el backend-\r\n */\r\nexport const ListCommentaries = async () => {\r\n    const response = await axiosInstance.get(`${API_URL}`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n\r\nexport const ListCommentaryVideo = async (idVideo) => {\r\n    const response = await axiosInstance.post(`${API_URL}list_by_video/`,idVideo);\r\n    //console.log(response);\r\n    \r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n    else { \r\n        console.log(\"error\");\r\n        return await response.data;\r\n    }\r\n  };\r\n/**\r\n * Función para obtener un comentario en específico.\r\n * @param {pk} commentaryID \r\n * @returns data enviada desde el backend\r\n */\r\nexport const getCommentary = async (commentaryID) => {\r\n    const response = await axiosInstance.get(`${API_URL}${commentaryID}`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n\r\n/**\r\n * Función para actualizar un comentario .\r\n * @param {pk} id \r\n * @param {formdata} updCommentary \r\n * @returns data enviada desde el backend\r\n */\r\nexport const updateCommentary = async(id,updCommentary) =>{\r\n    const response = await axiosInstance.patch(API_URL+id+\"/\",updCommentary);\r\n    if (response.status === 200) {\r\n        return response.data;\r\n    }\r\n}","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"https://sccotview.com/api/series/\";\r\n\r\n/**\r\n * Función para consultar todas las series registradas en la base de datos.\r\n * @returns Data enviada desde el backend\r\n */\r\nexport const ListSeries = async () => {\r\n  const response = await axiosInstance.get(API_URL);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const RegisterSerie = async (newSerie) => {\r\n  const response = await axiosInstance.post(API_URL, newSerie);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const getSerie = async (serieID) => {\r\n  const response = await axiosInstance.get(`${API_URL}${serieID}`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\n\r\nexport const updateSerie = async(id,updSerie) =>{\r\n  const response = await axiosInstance.patch(API_URL+id+\"/\",updSerie);\r\n  if (response.status === 200) {\r\n      return response.data;\r\n  }\r\n}","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"https://sccotview.com/api/temporadas/\";\r\n\r\n/**\r\n * Función para consultar todas las temporadas registradas en la base de datos.\r\n * @returns Data enviada desde el backend\r\n */\r\nexport const ListTemporadas = async () => {\r\n  const response = await axiosInstance.get(API_URL);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const RegisterTemporada = async (newTemporada) => {\r\n  const response = await axiosInstance.post(API_URL, newTemporada);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const getTemporada = async (temporadaID) => {\r\n  const response = await axiosInstance.get(`${API_URL}${temporadaID}`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const updateTemporada = async(id,updTemporada) =>{\r\n  const response = await axiosInstance.patch(API_URL+id+\"/\",updTemporada);\r\n  if (response.status === 200) {\r\n      return response.data;\r\n  }\r\n}"],"names":["useStyles","makeStyles","theme","containerModal","border","borderRadius","boxShadow","cloud","width","background","color","containerForm","height","root","display","histUser","handleClose","show","commentary_id","initialFormData","commentary","historial_user","video","videoID","useState","setCommentary","handleSubmit","e","preventDefault","formData","FormData","append","id","commentaryServer","console","log","useEffect","getCommentary","res","classes","onHide","centered","closeButton","className","onSubmit","controlId","as","rows","name","value","onChange","target","variant","onClick","type","API_URL","RegisterFechaRepro","newFecha","axiosInstance","response","status","data","ListFechaReprox2","RegisterHistorialVideo","newHistorial","ListHistorialVideo","idVideo","updateHistorialVideo","updateHU","webinarCondition","setHistUser","histVideo","setHistVideo","loading","setLoading","useParams","location","useLocation","iframeRef","useRef","intervalRef","getHistUser","userId","state","usuario","warn","HistorialUserServer","error","getHistorialVideo","HistorialVideoServer","video_id","length","nuevo","obtenerFecha","f","Date","day","getDate","padStart","month","getMonth","year","getFullYear","saveTime","player","getDuration","duracion","getCurrentTime","tiempo","validacion","parseInt","cont1","counter_repro","cont2","reproducciones","visto","getVimeoVideo","useCallback","Player","current","code_esp","playsinline","segundos","split","map","Number","convertTime","setCurrentTime","on","fechaActual","dataFecha","FechareproServer","fechasRepro","some","fecha","historial_Video","document","URL","includes","setInterval","repetirCada10Segundos","role","ref","title","textAlign","nameUser","fontSize","containerComment","maxWidth","margin","marginBottom","commentaries","useModal","showEdit","handleShowEdit","handleCloseEdit","contentClassName","scrollable","element","index","created_date","toLocaleDateString","alignItems","initialValue","setShow","handleShow","RegisterCommentary","newCommentary","ListCommentaryVideo","commentaryID","updateCommentary","updCommentary","ListSeries","RegisterSerie","newSerie","getSerie","serieID","updateSerie","updSerie","ListTemporadas","RegisterTemporada","newTemporada","getTemporada","temporadaID","updateTemporada","updTemporada"],"sourceRoot":""}