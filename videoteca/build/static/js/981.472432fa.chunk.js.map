{"version":3,"file":"static/js/981.472432fa.chunk.js","mappings":"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","sources":["axios.js","components/series/serieDetail.js","hooks/useModal.js","services/commentary.js","services/historialUser.js","services/serie.js","services/temporada.js","services/videoServer.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { Buffer } from \"buffer\";\r\n\r\nconst API_URL = \"https://sccotview.com/api/\";\r\n\r\n/**\r\n * Lista de endpoints que no requieren autenticación\r\n * Puedes ajustar esto según los endpoints de tu backend que son públicos.\r\n */\r\nconst PUBLIC_ENDPOINTS = [\r\n  \"free/\",\r\n  \"free\",         // Para GET general de videos\r\n           // Para GET general de series\r\n];\r\n\r\n/**\r\n * Instancia de Axios para hacer peticiones al backend\r\n */\r\nconst token = localStorage.getItem(\"access_token\");\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: API_URL,\r\n  timeout: 5000,\r\n  headers: {\r\n    \"Content-Type\": \"multipart/form-data\",  // Cambiado según tu observación\r\n    accept: \"application/json\",\r\n  },\r\n});\r\n\r\n\r\n/**\r\n * Interceptor de request para agregar el token solo si la ruta NO es pública\r\n */\r\naxiosInstance.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem(\"access_token\");\r\n\r\n  // Detectar si la URL es pública\r\n  const isPublic = PUBLIC_ENDPOINTS.some(endpoint => config.url.includes(endpoint));\r\n\r\n  if (token && !isPublic) {\r\n    config.headers[\"Authorization\"] = \"JWT \" + token;\r\n  } else {\r\n    delete config.headers[\"Authorization\"]; // Asegura que no se mande nada si no es necesario\r\n  }\r\n\r\n  return config;\r\n});\r\n\r\n/**\r\n * Interceptor de respuesta para manejar expiración del token\r\n */\r\naxiosInstance.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  async function (error) {\r\n    const originalRequest = error.config;\r\n\r\n    if (typeof error.response === \"undefined\") {\r\n      console.warn(\r\n        \"A server/network error occurred. \" +\r\n        \"Looks like CORS might be the problem.\"\r\n      );\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    if (\r\n      error.response.status === 401 &&\r\n      originalRequest.url === API_URL + \"api/token/refresh/\"\r\n    ) {\r\n      window.location.href = \"/userlogin1/\";\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    if (\r\n      error.response.data.code === \"token_not_valid\" &&\r\n      error.response.status === 401 &&\r\n      error.response.statusText === \"Unauthorized\"\r\n    ) {\r\n      const refreshToken = localStorage.getItem(\"refresh_token\");\r\n\r\n      if (refreshToken) {\r\n        const tokenParts = JSON.parse(\r\n          Buffer.from(refreshToken.split(\".\")[1], \"base64\").toString()\r\n        );\r\n\r\n        const now = Math.ceil(Date.now() / 1000);\r\n\r\n        if (tokenParts.exp > now) {\r\n          try {\r\n            const response = await axiosInstance.post(\"api/token/refresh/\", {\r\n              refresh: refreshToken,\r\n            });\r\n\r\n            localStorage.setItem(\"access_token\", response.data.access_token);\r\n            localStorage.setItem(\"refresh_token\", response.data.refresh_token);\r\n\r\n            axiosInstance.defaults.headers[\"Authorization\"] =\r\n              \"JWT \" + response.data.access_token;\r\n            originalRequest.headers[\"Authorization\"] =\r\n              \"JWT \" + response.data.access_token;\r\n\r\n            return axiosInstance(originalRequest);\r\n          } catch (err) {\r\n            console.log(err);\r\n          }\r\n        } else {\r\n          console.log(\"Refresh token is expired\", tokenParts.exp, now);\r\n          localStorage.clear();\r\n          window.location.href = \"/userlogin2/\";\r\n        }\r\n      } else {\r\n        console.log(\"Refresh token not available.\");\r\n        localStorage.clear();\r\n        window.location.href = \"/userlogin3/\";\r\n      }\r\n    }\r\n\r\n    if (error.response.status === 401) {\r\n      localStorage.clear();\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosInstance;","import { useEffect, useState } from \"react\";\r\nimport {useLocation, useNavigate} from 'react-router-dom';\r\nimport { useParams } from \"react-router-dom\";\r\nimport Rating from '@mui/material/Rating';\r\n\r\n//dependencias\r\nimport * as VideoServer from \"../../services/videoServer\";\r\nimport * as SerieServer from \"../../services/serie\";\r\nimport * as TemporadaServer from \"../../services/temporada\";\r\n\r\n\r\nimport * as HistorialUserServer from \"../../services/historialUser\";\r\nimport * as commentaryServer from \"../../services/commentary\";\r\nimport { useModal } from \"../../hooks/useModal\";\r\n\r\n//MaterialUI\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from '@mui/material/Button';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport StarIcon from \"@mui/icons-material/Star\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport StarBorderIcon from \"@mui/icons-material/StarBorder\";\r\nimport Stack from '@mui/material/Stack';\r\n\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\nimport 'react-lazy-load-image-component/src/effects/blur.css'\r\n\r\n\r\n\r\n//components\r\nimport \"../../styles/styles.css\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(0),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  }\r\n}));\r\n/**\r\n * Función para mostrar el detalle de un video y guardar la puntuación.\r\n * @returns Componente que muestra el detalle de un video junto con el iframe\r\n */\r\nconst SerieDetail = () => {\r\n  const history = useNavigate();\r\n  const [show, handleShow, handleClose] = useModal(false);\r\n  const [show2, handleShow2, handleClose2] = useModal(false);\r\n  const [histUsers, setHistUsers] = useState();  \r\n\r\n  const location = useLocation();\r\n  const { id } = useParams();\r\n  const [video, setVideo] = useState([]);\r\n  const [serie, setSerie] = useState([]);\r\n  const [temporada,setTemporada] = useState([]);\r\n  const [duracion, setDuracion] = useState([]);\r\n  const [uploadDate, setUploadDate] = useState(null);\r\n  const [histUser, setHistUser] = useState(location.state);\r\n  const [commentaries, setCommentaries] = useState([]);\r\n  const [activeStar, setActiveStar] = useState(-1);\r\n  const [cantidadVideosSerie, setCantidadVideosSerie] = useState(1);\r\n  const totalStars = 5;\r\n\r\n  \r\n /*  useEffect(() => {\r\n    const getSeries = async (serieID) => {\r\n      const res = await SerieServer.getSerie(2);\r\n      const serie = res;\r\n      console.log(serie);\r\n\r\n      setSerie({\r\n        ...serie,\r\n      });\r\n    };\r\n    getSeries(video.serie);\r\n\r\n  }, []); */\r\n    useEffect(() => {\r\n      //console.log(id);\r\n    const getTemporada = async () => {\r\n    const res = await TemporadaServer.getTemporada(id)\r\n    const temporada = res;\r\n   // console.log(temporada);\r\n        setTemporada(temporada)\r\n    };\r\n    getTemporada(id)\r\n\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getVideos = async () => {\r\n      const res = await VideoServer.ListVideos()\r\n      const videos = res;\r\n      setVideo(videos.videos)\r\n    };\r\n    getVideos()\r\n\r\n  }, []);\r\n  const changeDuration = (duration) => {\r\n    let tiempo = duration.split(':');\r\n    let new_duration = \"\";\r\n    if (tiempo) {\r\n      if (tiempo[0] !== \"00\") {\r\n        new_duration = tiempo[0] + \"h\";\r\n      }\r\n      if (tiempo[1] !== \"00\") {\r\n        new_duration = \" \" + new_duration + \" \" + tiempo[1] + \"min\";\r\n      }\r\n      /* if (tiempo[2] !==\"00\") {\r\n        new_duration = \" \"+new_duration+\" \"+tiempo[2]+\"s\";\r\n      } */\r\n    }\r\n    return new_duration.trim(); // trim() para eliminar cualquier espacio en blanco adicional\r\n  };\r\n  \r\n  \r\n  const getHistorialUsers = async () => {\r\n    try {\r\n      const res = await HistorialUserServer.ListHistorial();\r\n      //console.log(res);\r\n      setHistUsers(res[0]);// aqui se le coloco el [0] porque si no me estaria llamando a todos los usuarios\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getHistorialUsers();\r\n  }, []);\r\n\r\n\r\n\r\n  const entrarVideo = (videoId)=>{\r\n    history(`/seeVideo/${videoId}`,{state:histUsers});\r\n  }\r\n  \r\n\r\n   useEffect(() => {      \r\n    if (histUser) {\r\n      setActiveStar(histUser.user_score-1);\r\n    } else {\r\n      history(\"/loginuser\");      \r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []) \r\n\r\n  /**\r\n   * Función para cambiar la calificación del video.\r\n   * @param {int} index \r\n   */\r\n  const handleClick = async (index) => {\r\n    setActiveStar(index);\r\n    let cumulative_score = video.cumulative_score;\r\n    let number_votes = video.numberOfVotes;\r\n\r\n    if (histUser.user_score) {\r\n      cumulative_score = cumulative_score - histUser.user_score + index+1;\r\n      const score_video = cumulative_score/number_votes;\r\n      setHistUser({...histUser, user_score:index+1});\r\n      await VideoServer.partialUpdateVideo(video.id, {'cumulative_score': cumulative_score, 'score': score_video})\r\n\r\n    } else {\r\n      number_votes +=1;\r\n      cumulative_score = cumulative_score + index+1;\r\n      const score_video = cumulative_score/number_votes;\r\n      setHistUser({...histUser, user_score:index+1});\r\n      await VideoServer.partialUpdateVideo(video.id, {'cumulative_score': cumulative_score,'numberOfVotes': number_votes,'score': score_video})\r\n    }\r\n    await HistorialUserServer.updateHistorialUser(histUser.id,{'user_score': index+1});\r\n\r\n  };\r\n  \r\n  if (histUser) {\r\n    return (\r\n    <section className=\"d-flex justify-content-center\">\r\n      \r\n    <section style={{maxWidth:\"1450px\",minWidth:\"50%\", padding:\"20px\"}} >\r\n      <div className=\"d-flex justify-content-end\">\r\n        <button  onClick={() => window.history.back()} className=\"btn btn-light mt-4\" value=\"Volver\">Volver</button>\r\n      </div>\r\n      <div>\r\n        \r\n        <div className=\"pb-5\">\r\n          <h2> {temporada.temporada}</h2>\r\n          <p className=\"\">{temporada.description}</p>\r\n          <div>\r\n\r\n          <p className=\"border border-warning d-inline p-2 rounded text-warning\">{video.filter((v) => v.temporada === temporada.id).length} Videos</p>\r\n          {/* <button className=\"btn btn-outline-primary p-1 mx-2\">Nombre Serie </button> */}\r\n          </div>\r\n        </div>\r\n        <div className=\"d-flex flex-wrap \">\r\n        {video\r\n          .filter((video) => video.temporada === temporada.id).sort((a,b)=>a.id-b.id)\r\n          .map((filteredVideo) => (\r\n            <div key={filteredVideo.id} className=\"card bg-dark  m-2 cursorPointer card-video \" onClick={() => entrarVideo(filteredVideo.id)}>\r\n              <LazyLoadImage effect=\"blur\"    src={`https://sccotview.com${filteredVideo.featured_image}`} className=\"card-img-top cursorPointer  \" alt=\"...\" />\r\n              <div className=\"card-body pb-0 d-flex  flex-column justify-content-between \" key={filteredVideo.id}>\r\n                <h6 className=\"truncate-text\">\r\n                  {filteredVideo.title_espanol}\r\n                </h6>\r\n                <small className=\"truncate-text\">\r\n                  {filteredVideo.description_esp}   \r\n                </small>\r\n                <div className=\"d-flex justify-content-between \">\r\n                  <p>{changeDuration(filteredVideo.duration)}</p>\r\n                  <div>\r\n                  <Rating name=\"read-only\" value={parseFloat(filteredVideo.score)} precision={0.5} readOnly />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n\r\n        </div>\r\n      </div>\r\n    </section>\r\n    </section>\r\n\r\n    );\r\n  }else{\r\n    return(\r\n    <>\r\n    <p>No se pudo cargar</p>\r\n    </>\r\n    )\r\n  }\r\n  return (\r\n    <p style={{ fontSize: \"25px\" }}>Inicia sesión para ver todos los videos!</p>\r\n  );\r\n};\r\n\r\nexport default SerieDetail;\r\n","import { useState } from 'react';\r\n\r\n\r\nexport const useModal = (initialValue = false) => {\r\n  const [show, setShow] = useState(initialValue);\r\n\r\n  const handleShow = () => setShow(true); //función para mostrar el modal de comentario.\r\n  const handleClose = () => setShow(false); //función para cerrar el modal de comentario.\r\n\r\n  return [show, handleShow, handleClose];\r\n}\r\n\r\n\r\n","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"https://sccotview.com/api/commentaries/\";\r\n\r\n/**\r\n * Función para agregar un nuevo comentario a un video.\r\n * @param {formdata} newCommentary \r\n * @returns data enviada desde el backend\r\n */\r\nexport const RegisterCommentary = async (newCommentary) => {\r\n    const response = await axiosInstance.post(API_URL, newCommentary);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n/**\r\n * Función para entontrar todos los comentarios realizados.\r\n * @returns data enviada desde el backend-\r\n */\r\nexport const ListCommentaries = async () => {\r\n    const response = await axiosInstance.get(`${API_URL}`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n\r\nexport const ListCommentaryVideo = async (idVideo) => {\r\n    const response = await axiosInstance.post(`${API_URL}list_by_video/`,idVideo);\r\n    //console.log(response);\r\n    \r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n    else { \r\n        console.log(\"error\");\r\n        return await response.data;\r\n    }\r\n  };\r\n/**\r\n * Función para obtener un comentario en específico.\r\n * @param {pk} commentaryID \r\n * @returns data enviada desde el backend\r\n */\r\nexport const getCommentary = async (commentaryID) => {\r\n    const response = await axiosInstance.get(`${API_URL}${commentaryID}`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n\r\n/**\r\n * Función para actualizar un comentario .\r\n * @param {pk} id \r\n * @param {formdata} updCommentary \r\n * @returns data enviada desde el backend\r\n */\r\nexport const updateCommentary = async(id,updCommentary) =>{\r\n    const response = await axiosInstance.patch(API_URL+id+\"/\",updCommentary);\r\n    if (response.status === 200) {\r\n        return response.data;\r\n    }\r\n}","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"https://sccotview.com/api/historialUser/\";\r\n\r\n/**\r\n * Función para agregar un nuevo historial de usuario.\r\n * @param {formdata} newHistorial \r\n * @returns data enviada desde el backend\r\n */\r\nexport const RegisterHistorialUser = async (newHistorial) => {\r\n    const response = await axiosInstance.post(API_URL, newHistorial);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n/**\r\n * Función para entontrar todos los historiales de usuarios.\r\n * @returns data enviada desde el backend-\r\n */\r\nexport const ListHistorial = async () => {\r\n    const response = await axiosInstance.get(`${API_URL}`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n\r\nexport const ListHistorial4Comments = async () => {\r\n    const response = await axiosInstance.get(`${API_URL}list_4_comments/`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n  \r\n/**\r\n * Función para obtener un historial en específico.\r\n * @param {pk} histID \r\n * @returns data enviada desde el backend\r\n */\r\nexport const getHistorial = async (histID) => {\r\n  //console.log(histID);\r\n    const response = await axiosInstance.get(`${API_URL}${histID}`);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n/**\r\n * Función para listar el historial de un usuario en específico.\r\n * @param {fk} idUser \r\n * @returns data enviada desde el backend\r\n */\r\nexport const ListHistorialUser = async (idUser) => {\r\n    const response = await axiosInstance.post(`${API_URL}list_by_user/`,idUser);\r\n    if (response.status === 200) {\r\n      return await response.data;\r\n    }\r\n  };\r\n\r\n/**\r\n * Función para actualizar un historial de usuario.\r\n * @param {pk} id \r\n * @param {formdata} updateHU \r\n * @returns data enviada desde el backend\r\n */\r\nexport const updateHistorialUser = async(id,updateHU) =>{\r\n    const response = await axiosInstance.patch(API_URL+id+\"/\",updateHU);\r\n    if (response.status === 200) {\r\n        return response.data;\r\n    }\r\n}","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"https://sccotview.com/api/series/\";\r\n\r\n/**\r\n * Función para consultar todas las series registradas en la base de datos.\r\n * @returns Data enviada desde el backend\r\n */\r\nexport const ListSeries = async () => {\r\n  const response = await axiosInstance.get(API_URL);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const RegisterSerie = async (newSerie) => {\r\n  const response = await axiosInstance.post(API_URL, newSerie);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const getSerie = async (serieID) => {\r\n  const response = await axiosInstance.get(`${API_URL}${serieID}`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\n\r\nexport const updateSerie = async(id,updSerie) =>{\r\n  const response = await axiosInstance.patch(API_URL+id+\"/\",updSerie);\r\n  if (response.status === 200) {\r\n      return response.data;\r\n  }\r\n}","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"https://sccotview.com/api/temporadas/\";\r\n\r\n/**\r\n * Función para consultar todas las temporadas registradas en la base de datos.\r\n * @returns Data enviada desde el backend\r\n */\r\nexport const ListTemporadas = async () => {\r\n  const response = await axiosInstance.get(API_URL);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const RegisterTemporada = async (newTemporada) => {\r\n  const response = await axiosInstance.post(API_URL, newTemporada);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const getTemporada = async (temporadaID) => {\r\n  const response = await axiosInstance.get(`${API_URL}${temporadaID}`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const updateTemporada = async(id,updTemporada) =>{\r\n  const response = await axiosInstance.patch(API_URL+id+\"/\",updTemporada);\r\n  if (response.status === 200) {\r\n      return response.data;\r\n  }\r\n}","import axiosInstance from \"../axios\";\r\n\r\nconst API_URL = \"https://sccotview.com/api/videos/\";\r\n\r\n/**\r\n * Función para consultar con el backend la lista de todos los videos sin filtrar.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const ListVideos = async () => {\r\n  const response = await axiosInstance.get(`${API_URL}`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\nexport const ListWebinars = async () => {\r\n  const response = await axiosInstance.get(`${API_URL}public/webinars/`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\nexport const ListVideosPublic = async () => {\r\n  const response = await axiosInstance.get(`${API_URL}public/`);\r\n  if (response.status === 200) {\r\n    //console.log(response.data);\r\n    \r\n    return response.data;\r\n  }\r\n};\r\n/**\r\n * Función para consultar con el backend la lista de videos con el tipo Peliculas.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const ListPeliculas = async () => {\r\n  const response = await axiosInstance.get(`${API_URL}listPeliculas/`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n}\r\n/**\r\n * Función para consultar con el backend la lista de videos con el tipo Peliculas.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const ListVideosPorTemporada = async (temporadaId) => {\r\n  const response = await axiosInstance.get(`${API_URL}videostemporada/${temporadaId}`);\r\n  //console.log(response.data);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n}\r\n/**\r\n * Función para consultar con el backend la lista de videos con el tipo Series.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const ListSeries = async () => {\r\n  const response = await axiosInstance.get(`${API_URL}listSeries/`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n}\r\n/**\r\n * Función para consultar con el backend la lista de videos con el tipo Casos.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const ListCasos = async () => {\r\n  const response = await axiosInstance.get(`${API_URL}listCasos/`);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n}\r\n/**\r\n * Función para consultar con el backend un video con el id específico.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const getVideo = async (videoID) => {\r\n  const response = await axiosInstance.get(`${API_URL}${videoID}`);\r\n  //console.log(response.data);\r\n  \r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n/**\r\n * Función para consultar con el backend un video con el id específico. Esta función se usa para tener los datos del video en el formulario de update.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const getVideoDT = async (videoID) => {\r\n  const response = await axiosInstance.get(API_URL + \"retrieve/\" + videoID);\r\n  if (response.status === 200) {\r\n    return response.data;\r\n  }\r\n};\r\n/**\r\n * Función Post para enviar los datos del formulario de registro de un nuevo video.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const RegisterVideo = async (newVideo) => {\r\n  const response = await axiosInstance.post(API_URL, newVideo);\r\n // console.log(response);\r\n  \r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n  else if(response.status === 409) {\r\n    return await response.data;\r\n  }\r\n};\r\n/**\r\n * Función para actualizar un video.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const UpdateVideo = async (videoID, updateVideo) => {\r\n  const response = await axiosInstance.put(\r\n    API_URL + videoID + \"/\",\r\n    updateVideo\r\n  );\r\n  //console.log(response);\r\n  if (response.status === 200) {\r\n    return await response.data;\r\n  }\r\n};\r\n\r\nexport const partialUpdateVideo = async(id,PupdateVideo) =>{\r\n  const response = await axiosInstance.patch(API_URL+id+\"/\",PupdateVideo);\r\n  if (response.status === 200) {\r\n      return response.data;\r\n  }\r\n}\r\n/**\r\n * Función para eliminar un video.\r\n * @returns La data enviada desde el backend. \r\n */\r\nexport const DeleteVideo = async (videoID) => {\r\n  return await axiosInstance.delete(`${API_URL}${videoID}`);\r\n\r\n};\r\n"],"names":["API_URL","PUBLIC_ENDPOINTS","axiosInstance","localStorage","getItem","axios","baseURL","timeout","headers","accept","interceptors","request","use","config","token","isPublic","some","endpoint","url","includes","response","error","originalRequest","console","warn","Promise","reject","status","window","location","href","data","code","statusText","refreshToken","tokenParts","JSON","parse","Buffer","split","toString","now","Math","ceil","Date","exp","post","refresh","setItem","access_token","refresh_token","defaults","log","clear","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","history","useNavigate","useModal","useState","histUsers","setHistUsers","useLocation","id","useParams","video","setVideo","temporada","setTemporada","state","histUser","setActiveStar","useEffect","getTemporada","TemporadaServer","res","getVideos","VideoServer","videos","changeDuration","duration","tiempo","new_duration","trim","getHistorialUsers","HistorialUserServer","user_score","className","style","maxWidth","minWidth","padding","onClick","back","value","description","filter","v","length","sort","a","b","map","filteredVideo","videoId","LazyLoadImage","effect","src","featured_image","alt","title_espanol","description_esp","name","parseFloat","score","precision","readOnly","initialValue","show","setShow","handleShow","handleClose","RegisterCommentary","newCommentary","ListCommentaryVideo","idVideo","getCommentary","commentaryID","updateCommentary","updCommentary","RegisterHistorialUser","newHistorial","ListHistorial","getHistorial","histID","ListHistorialUser","idUser","updateHistorialUser","updateHU","ListSeries","RegisterSerie","newSerie","getSerie","serieID","updateSerie","updSerie","ListTemporadas","RegisterTemporada","newTemporada","temporadaID","updateTemporada","updTemporada","ListVideos","ListWebinars","ListVideosPublic","ListPeliculas","ListCasos","getVideo","videoID","getVideoDT","RegisterVideo","newVideo","UpdateVideo","updateVideo","partialUpdateVideo","PupdateVideo","DeleteVideo"],"sourceRoot":""}